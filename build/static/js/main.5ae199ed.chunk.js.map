{"version":3,"sources":["Hooks/useVanta.jsx","Components/WelcomeScreen/WelcomeScreen.jsx","Pages/WelcomePage.jsx","Utilities/utilities.jsx","Components/IconState/IconState.jsx","Utilities/transform/getAllWeather.jsx","Utilities/urls.jsx","Hooks/useCityList.jsx","Components/CityInfo/CityInfo.jsx","Components/Weather/Weather.jsx","WeatherContext.jsx","Components/CityList/CityList.jsx","Components/AppFrame/AppFrame.jsx","Utilities/searchValidation.jsx","Components/Search/Search.jsx","Pages/MainPage.jsx","Components/WeatherDetails/WeatherDetails.jsx","Components/ForecastChart/ForecastChart.jsx","Components/ForecastItem/ForecastItem.jsx","Components/Forecast/Forecast.jsx","Utilities/transform/getChartData.jsx","Utilities/transform/getForecastItemList.jsx","Hooks/useCityPage.jsx","Pages/CityPage.jsx","Pages/NotFound.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["useVanta","myRefDiv","useRef","useState","vanta","setVanta","useEffect","Clouds","THREE","el","current","destroy","WelcomeScreen","children","className","ref","WelcomePage","iconContextSize","useMemo","size","Grid","container","direction","justifyContent","item","xs","alignItems","Provider","value","Typography","variant","color","Link","aria-label","component","RouterLink","to","getCityCode","city","countryCode","toCelsius","temp","Number","convertUnits","from","toFixed","validValues","stateByName","clouds","WiDayCloudy","clear","WiDaySunny","rain","WiRain","snow","WiSnow","drizzle","WiRaindrop","thunderstorm","WiThunderstorm","IconState","state","StateByName","getAllWeather","response","data","temperature","main","humidity","wind","speed","stateFromServer","weather","toLowerCase","includes","propName","propValue","apiKey","getWeatherUrl","getForecastUrl","useCityList","cities","allWeather","actions","error","setError","setWeather","a","url","type","payload","axios","get","allWeatherAux","request","forEach","CityInfo","display","Weather","spacing","Skeleton","height","width","initialValue","allChartData","allForecastItemList","WeatherStateContext","React","createContext","WeatherDispatchContext","reducer","action","weatherCity","newAllWeather","chartDataCity","newAllChartData","forecastItemListCity","newAllForecastItemListCity","WeatherContext","useReducer","dispatch","useWeatherDispatchContext","useContext","Error","useWeatherStateContext","CityListItem","memo","eventOnClickCity","eventOnClickDelete","ListItem","button","onClick","md","CityList","onClickCity","Alert","onClose","severity","List","map","cityAndCountry","cityCountry","AppFrame","AppBar","position","Toolbar","IconButton","LinkRouter","sm","lg","searchSchema","yup","shape","required","min","max","Search","callback","newCity","setNewCity","newCountryCode","setNewCountryCode","createNewCity","e","preventDefault","dataSearch","isValid","alert","TextField","label","onChange","target","name","Button","MainPage","history","useHistory","setCityCountry","localStorage","getItem","console","log","JSON","parse","setItem","stringify","length","Paper","elevation","push","filter","i","WeatherDetails","ForecastChart","marginSize","top","bottom","left","right","ResponsiveContainer","LineChart","margin","Legend","Tooltip","XAxis","dataKey","YAxis","CartesianGrid","Line","stroke","ForecastItem","weekDay","hour","Forecast","forecastItemList","forecast","data-testid","renderForecastItem","getChartData","d","moment","add","day","temps","list","unix","dt","dayOfYear","dayHour","format","Math","hasTemps","getForecastItemList","interval","index","useCityPage","useParams","getForecast","cityCode","dataAux","forecastItemListAux","CityPage","chartData","LinearProgress","NotFound","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ae199ed.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport Clouds from \"vanta/dist/vanta.clouds.min\";\nimport * as THREE from \"three\";\n\nconst useVanta = () => {\n    const myRefDiv = useRef(null);\n    const [vanta, setVanta] = useState(0);\n    useEffect(() => {\n  \n      if (!vanta) {\n        setVanta(\n          Clouds({\n            THREE,\n            el: myRefDiv.current,\n          })\n        );\n  \n      }\n      return () => {\n        if (vanta) {\n          vanta.destroy();\n        }\n      };\n    }, [vanta]);\n    return myRefDiv\n  }\n\n  export default useVanta","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useVanta from \"../../Hooks/useVanta\";\n\n\n\nconst WelcomeScreen = ({ children }) => {\n  const myRefDiv = useVanta()\n  return (\n    <div className=\"full\" ref={myRefDiv}>\n      {children}\n    </div>\n  );\n};\n\nWelcomeScreen.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default WelcomeScreen;\n","import React, { useMemo } from \"react\";\nimport WelcomeScreen from \"../Components/WelcomeScreen\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { IconContext } from \"react-icons\";\nimport { WiDaySunny } from \"react-icons/wi\";\nconst WelcomePage = () => {\n  const iconContextSize = useMemo(() => ({ size: \"6em\" }), []);\n  return (\n    <WelcomeScreen>\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        className=\"full\"\n      >\n        <div className=\"highlight\">\n          <Grid\n            item\n            container\n            xs={12}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <IconContext.Provider value={iconContextSize}>\n                <WiDaySunny />\n              </IconContext.Provider>\n            </Grid>\n            <Grid\n              item\n              container\n              direction=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Typography variant=\"h4\" color=\"inherit\">\n                Weather App\n              </Typography>\n              <Link\n                color=\"inherit\"\n                aria-label=\"menu\"\n                component={RouterLink}\n                to=\"/main\"\n              >\n                Start\n              </Link>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </WelcomeScreen>\n  );\n};\n\nexport default WelcomePage;\n","import convertUnits from \"convert-units\";\n\nexport  const getCityCode = (city, countryCode) => `${city}-${countryCode}`\nexport const toCelsius = (temp) => Number(convertUnits(temp).from(\"K\").to(\"C\").toFixed(0));\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { WiDayCloudy,\n  WiDaySunny,\n  WiRain,\n  WiSnow,\n  WiRaindrop,\n  WiThunderstorm } from 'react-icons/wi'\n \n\nexport const validValues = [\"clouds\", \"drizzle\", \"clear\", \"rain\", \"snow\", \"thunderstorm\"];\n\nconst stateByName = {\n  clouds: WiDayCloudy,\n  clear: WiDaySunny,\n  rain: WiRain,\n  snow: WiSnow, \n  drizzle: WiRaindrop,\n  thunderstorm: WiThunderstorm\n}\n\nconst IconState = ({ state }) => {\n  const StateByName = stateByName[state];\n  return <StateByName />;\n};\n\nIconState.propTypes = {\n  state: PropTypes.oneOf(validValues).isRequired,\n};\n\nexport default IconState;\n","import { toCelsius, getCityCode } from \"../utilities\";\nimport { validValues } from \"../../Components/IconState\";\n\nconst getAllWeather = (response, city, countryCode) => {\n  const { data } = response;\n  const temperature = toCelsius(data.main.temp);\n  const humidity = data.main.humidity;\n  const wind = data.wind.speed;\n  const stateFromServer = data.weather[0].main.toLowerCase();\n  const state = validValues.includes(stateFromServer) ? stateFromServer : null;\n\n  const propName = getCityCode(city, countryCode);\n  const propValue = { temperature, state, humidity, wind };\n  return {\n    [propName]: propValue,\n  };\n};\n\nexport default getAllWeather;\n","const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n\nexport const getWeatherUrl = (city, countryCode) =>\n  `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\nexport const getForecastUrl = (city, countryCode) =>\n  `http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${apiKey}`;\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = (cities, allWeather, actions) => {\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        \n        const propName = [getCityCode(city, countryCode)]\n        actions({type: 'SET_ALL_WEATHER', payload: {[propName]:{}}})\n        const response = await axios.get(url);\n\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n\n        actions({type: 'SET_ALL_WEATHER', payload: allWeatherAux})\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n    cities.forEach(({ city, countryCode }) => {\n      if(!allWeather[getCityCode(city, countryCode)]){\n        setWeather(city, countryCode);\n      }\n      \n    });\n  }, [cities, actions, allWeather]);\n  return { error, setError };\n};\n\nexport default useCityList;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\n\n\nconst CityInfo =({city, countryCode}) => {\n    return (\n        <>\n            <Typography display=\"inline\" variant=\"h4\">{city}  {countryCode}</Typography>\n               \n            \n        </>\n    )\n}\n\nCityInfo.propTypes = {\n    city: PropTypes.string.isRequired,\n    countryCode: PropTypes.string\n}\n\nexport default CityInfo\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { IconContext } from \"react-icons\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconState, { validValues } from \"./../IconState\";\n\nconst Weather = ({ temperature, state }) => {\n  const iconContextSize = useMemo(() => ({ size: \"6em\" }), []);\n  return (\n    <Grid\n      container\n      item\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      spacing={2}\n    >\n      <IconContext.Provider value={iconContextSize}>\n        {state ? (\n          <IconState state={state} />\n        ) : (\n          <Skeleton variant=\"circle\" height={80} width={80}></Skeleton>\n        )}\n      </IconContext.Provider>\n\n      {temperature ? (\n        <Typography display=\"inline\" variant=\"h3\">\n          {temperature}°C\n        </Typography>\n      ) : (\n        <Skeleton variant=\"circle\" height={80} width={80}></Skeleton>\n      )}\n    </Grid>\n  );\n};\n\nWeather.propTypes = {\n  temperature: PropTypes.number,\n  state: PropTypes.oneOf(validValues),\n};\n\nexport default Weather;\n","import React, { useReducer, useContext } from \"react\";\n\nconst initialValue = {\n  allWeather: {},\n  allChartData: {},\n  allForecastItemList: {},\n};\nconst WeatherStateContext = React.createContext();\nconst WeatherDispatchContext = React.createContext();\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ALL_WEATHER\":\n      const weatherCity = action.payload;\n      const newAllWeather = { ...state.allWeather, ...weatherCity };\n      return { ...state, allWeather: newAllWeather };\n    case \"SET_CHART_DATA\":\n      const chartDataCity = action.payload;\n      const newAllChartData = { ...state.allChartData, ...chartDataCity };\n      return { ...state, allChartData: newAllChartData };\n    case \"SET_FORECAST_ITEM_LIST\":\n      const forecastItemListCity = action.payload;\n      const newAllForecastItemListCity = {\n        ...state.allForecastItemList,\n        ...forecastItemListCity,\n      };\n      return { ...state, allForecastItemList: newAllForecastItemListCity };\n    default:\n      return state;\n  }\n};\n\nconst WeatherContext = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  return (\n    <WeatherDispatchContext.Provider value={dispatch}>\n      <WeatherStateContext.Provider value={state}>\n        {children}\n      </WeatherStateContext.Provider>\n    </WeatherDispatchContext.Provider>\n  );\n};\nconst useWeatherDispatchContext = () => {\n  const dispatch = useContext(WeatherDispatchContext);\n  if(!dispatch){\n      throw Error('must set dispatch provider')\n  }\n  return dispatch;\n};\nconst useWeatherStateContext = () => {\n  const state = useContext(WeatherStateContext);\n  if(!state){\n    throw Error('must set state provider')\n}\n  return state;\n};\nexport { WeatherContext, useWeatherDispatchContext, useWeatherStateContext };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport {\n  useWeatherStateContext,\n  useWeatherDispatchContext,\n} from \"../../WeatherContext\";\n\nconst CityListItem = React.memo(\n  ({ city, countryCode, weather, eventOnClickCity, eventOnClickDelete }) => {\n    return (\n      <div className='cityItem'>\n        <ListItem button onClick={() => eventOnClickCity(city, countryCode)}>\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Grid item md={6} xs={12}>\n              <CityInfo city={city} countryCode={countryCode} />\n            </Grid>\n            <Grid item md={3} xs={12}>\n              <Weather\n                temperature={weather && weather.temperature}\n                state={weather && weather.state}\n              />\n            </Grid>\n          </Grid>\n        </ListItem>\n        <IconContext.Provider value={{ size: \"2em\" }}>\n          <AiFillDelete className=\"delete\" onClick={() => eventOnClickDelete(city)}/>\n        </IconContext.Provider>\n      </div>\n    );\n  }\n);\n\nconst renderCityAndCountry = (eventOnClickCity,) => (cityCountry, weather, eventOnClickDelete,) => {\n  const { city, countryCode } = cityCountry;\n  return (\n    <CityListItem\n      key={getCityCode(city, countryCode)}\n      eventOnClickCity={eventOnClickCity}\n      eventOnClickDelete={eventOnClickDelete}\n      weather={weather}\n      {...cityCountry}\n      city={city}\n    />\n  );\n};\n\nconst CityList = ({ cities, onClickCity, eventOnClickDelete }) => {\n  const actions = useWeatherDispatchContext();\n  const data = useWeatherStateContext();\n  const { allWeather } = data;\n  const { error, setError } = useCityList(cities, allWeather, actions);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n    \n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ],\n            eventOnClickDelete,\n            cityAndCountry.city\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CityList);\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport { IconContext } from \"react-icons\";\nimport { WiDaySunny } from \"react-icons/wi\";\nimport { Link as LinkRouter } from \"react-router-dom\";\n\nconst AppFrame = ({ children }) => {\n  const iconContextSize = useMemo(() => ({ size: \"2em\" }), []);\n  return (\n    <Grid container justifyContent=\"center\">\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton color=\"inherit\" aria-label=\"manu\">\n            <Link component={LinkRouter} to=\"/main\" color=\"inherit\">\n              <IconContext.Provider value={iconContextSize}>\n                <WiDaySunny />\n              </IconContext.Provider>\n            </Link>\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Weather App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid item xs={12} sm={11} md={10} lg={8}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n};\n\nAppFrame.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default AppFrame;\n","import * as yup from \"yup\"\n\nexport const searchSchema = yup.object().shape({\n    city: yup.string().required(),\n    countryCode: yup.string().min(2).max(2).required()\n})","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { searchSchema } from \"../../Utilities/searchValidation\";\nconst Search = ({ callback }) => {\n  const [newCity, setNewCity] = useState(\"\");\n  const [newCountryCode, setNewCountryCode] = useState(\"\");\n  const updateCity = (e) => setNewCity(e.target.value);\n  const updateCountryCode = (e) => setNewCountryCode(e.target.value);\n\n  const createNewCity = async (e) => {\n    e.preventDefault();\n    let dataSearch = {\n      city: newCity,\n      countryCode: newCountryCode,\n    };\n    const isValid = await searchSchema.isValid(dataSearch);\n    if (isValid) {\n      callback(newCity, newCountryCode);\n      setNewCountryCode(\"\");\n      setNewCity(\"\");\n    }else{\n      alert('Search error, both fields are required and country code must have two characters.')\n    }\n  };\n\n  return (\n    <form className=\"searchForm\">\n      <TextField\n        type=\"text\"\n        variant=\"outlined\"\n        label=\"City\"\n        color=\"primary\"\n        className=\"formItem\"\n        onChange={updateCity}\n        value={newCity}\n        name=\"city\"\n        required\n      />\n      <TextField\n        type=\"text\"\n        variant=\"outlined\"\n        label=\"Country Code\"\n        color=\"primary\"\n        className=\"formItem\"\n        onChange={updateCountryCode}\n        value={newCountryCode}\n        name=\"city\"\n        required\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"formItem\"\n        onClick={createNewCity}\n      >\n        Search\n      </Button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CityList from \"../Components/CityList\";\nimport AppFrame from \"../Components/AppFrame\";\nimport Search from \"../Components/Search\";\n\nconst MainPage = ({ actions, data }) => {\n  const history = useHistory();\n\n  const onClickHandler = (city, countryCode) => {\n    history.push(`/city/${countryCode}/${city}`);\n  };\n\n  const [cityCountry, setCityCountry] = useState([]);\n\n  const createNewTask = (newCity, newCountryCode) => {\n    setCityCountry([\n      ...cityCountry,\n      { city: newCity, countryCode: newCountryCode },\n    ]);\n  };\n  const eventOnClickDelete = (city) => {\n    setCityCountry(\n      [...cityCountry].filter((i) => {\n        return i.city !== city;\n      })\n    );\n  };\n  useEffect(() => {\n        let data= localStorage.getItem('cityCountry')\n        console.log(data)\n        if (data){\n            setCityCountry(JSON.parse(data))\n        }else{\n           setCityCountry([{city:'Bogotá', countryCode: 'CO'}]) \n           console.log('test',cityCountry)\n        }\n        \n  },[])\n  useEffect(() => {\n    localStorage.setItem(\"cityCountry\", JSON.stringify(cityCountry));\n  }, [cityCountry]);\n\n  return (\n    <AppFrame>\n      <Search callback={createNewTask} />\n\n      {cityCountry.length > 0 && (\n        <Paper elevation={3}>\n          <CityList\n            data={data}\n            actions={actions}\n            cities={cityCountry}\n            onClickCity={onClickHandler}\n            eventOnClickDelete={eventOnClickDelete}\n          />\n        </Paper>\n      )}\n    </AppFrame>\n  );\n};\n\nexport default MainPage;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nconst WeatherDetails = ({humidity, wind}) => {\n    return (\n        <Grid container item justifyContent=\"center\" alignItems=\"center\" direction=\"column\">\n            <Typography >Humidity:{humidity}%</Typography>\n            <Typography>Wind:{wind} km/h</Typography>\n        </Grid>\n    )\n}\n\nWeatherDetails.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired\n}\n\nexport default WeatherDetails\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst ForecastChart = ({ data }) => {\n  const marginSize = useMemo(\n    () => ({ top: 20, bottom: 20, left: 5, right: 5 }),\n    []\n  );\n  return (\n    <ResponsiveContainer height={250} width={\"95%\"}>\n      <LineChart margin={marginSize} data={data}>\n        <Legend></Legend>\n        <Tooltip></Tooltip>\n        <XAxis dataKey=\"dayHour\"></XAxis>\n        <YAxis></YAxis>\n        <CartesianGrid></CartesianGrid>\n        <Line type=\"monotone\" dataKey=\"max\" stroke=\"#ff0000\"></Line>\n        <Line type=\"monotone\" dataKey=\"min\" stroke=\"#0000ff\"></Line>\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nForecastChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      dayHour: PropTypes.string.isRequired,\n      min: PropTypes.number.isRequired,\n      max: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ForecastChart;\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconContext } from \"react-icons\";\nimport IconState, { validValues } from \"../IconState\";\n\nconst ForecastItem = ({ weekDay, hour, state, temperature }) => {\n  const iconContextSize = useMemo(() => ({ size: \"5em\" }),[])\n  return (\n    <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n      <Grid item>\n        <Typography>{weekDay}</Typography>\n      </Grid>\n      <Grid item>\n        <Typography>{hour}:00h</Typography>\n      </Grid>\n      <Grid item>\n        <IconContext.Provider value={iconContextSize}>\n          <IconState state={state} />\n        </IconContext.Provider>\n      </Grid>\n      <Grid item>\n        <Typography>{temperature}°C</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nForecastItem.propTypes = {\n  weekDay: PropTypes.string.isRequired,\n  hour: PropTypes.number.isRequired,\n  state: PropTypes.oneOf(validValues).isRequired,\n  temperature: PropTypes.number.isRequired,\n};\n\nexport default ForecastItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ForecastItem from \"../ForecastItem\";\nimport { validValues } from \"../IconState\";\n\nconst renderForecastItem = (forecast) => {\n  const { weekDay, hour, state, temperature } = forecast;\n  return (\n    <Grid data-testid=\"forecast-item-container\" item key={`${weekDay} ${hour}`} >\n      <ForecastItem\n        weekDay={weekDay}\n        hour={hour}\n        state={state}\n        temperature={temperature}\n      ></ForecastItem>\n    </Grid>\n  );\n};\n\nconst Forecast = ({ forecastItemList }) => {\n  return (\n    <Grid container justifyContent=\"space-around\" alignItems=\"center\">\n      {forecastItemList.map((forecast) => renderForecastItem(forecast))}\n    </Grid>\n  );\n};\n\nForecast.propTypes = {\n  forecastIltemList: PropTypes.arrayOf(\n    PropTypes.shape({\n      weekDay: PropTypes.string.isRequired,\n      hour: PropTypes.number.isRequired,\n      state: PropTypes.oneOf(validValues).isRequired,\n      temperature: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default Forecast;\n","import moment from \"moment\";\nimport { toCelsius } from \"../utilities\";\n\nconst getChartData = (data) => {\n  const daysAhead = [0, 1, 2, 3, 4, 5];\n  const days = daysAhead.map((d) => moment().add(d, \"d\"));\n  const dataAux = days\n    .map((day) => {\n      const tempObjArray = data.list.filter((item) => {\n        const dayOfYear = moment.unix(item.dt).dayOfYear();\n        return dayOfYear === day.dayOfYear();\n      });\n\n      const temps = tempObjArray.map((item) => item.main.temp);\n      return {\n        dayHour: day.format(\"dddd\"),\n        min: toCelsius(Math.min(...temps)),\n        max: toCelsius(Math.max(...temps)),\n        hasTemps: temps.length > 0 ? true : false,\n      };\n    })\n    .filter((item) => item.hasTemps);\n\n  return dataAux;\n};\n\nexport default getChartData;\n","import moment from \"moment\";\nimport { toCelsius } from \"../utilities\";\n\nconst getForecastItemList = (data) => {\n  const interval = [3, 6, 9, 12, 15, 18];\n\n  const forecastItemListAux = data.list\n    .filter((item, index) => interval.includes(index))\n    .map((item) => {\n      return {\n        hour: moment.unix(item.dt).hour(),\n        weekDay: moment.unix(item.dt).format(\"dddd\"),\n        state: item.weather[0].main.toLowerCase(),\n        temperature: toCelsius(item.main.temp),\n      };\n    });\n  return forecastItemListAux;\n};\n\nexport default getForecastItemList\n","import { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport getChartData from \"../Utilities/transform/getChartData\";\nimport { getForecastUrl } from \"../Utilities/urls\";\nimport getForecastItemList from \"../Utilities/transform/getForecastItemList\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityPage = (actions, allChartData, allForecastItemList ) => {\n  const { city, countryCode } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const cityCode = getCityCode(city, countryCode);\n      try {\n        const { data } = await axios.get(url);\n        const dataAux = getChartData(data);\n\n        //onSetChartData({ [cityCode]: dataAux });\n        actions({type: 'SET_CHART_DATA', payload: {[cityCode]: dataAux}})\n        const forecastItemListAux = getForecastItemList(data);\n        //onSetForecastItemList({ [cityCode]: forecastItemListAux });\n        actions({type: 'SET_FORECAST_ITEM_LIST', payload: {[cityCode]: forecastItemListAux}})\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n    const cityCode = getCityCode(city, countryCode)\n    if(allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]){\n      getForecast();\n    }\n    \n  }, [city, countryCode, actions, allChartData, allForecastItemList]);\n  return { city, countryCode };\n};\n\nexport default useCityPage;\n","import React, { useMemo } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\nimport useCityPage from \"../Hooks/useCityPage\";\nimport useCityList from \"../Hooks/useCityList\";\nimport { getCityCode } from \"../Utilities/utilities\";\nimport {\n  useWeatherDispatchContext,\n  useWeatherStateContext,\n} from \"../WeatherContext\";\nconst CityPage = () => {\n  \n  const data = useWeatherStateContext();\n  const actions = useWeatherDispatchContext();\n  const { allWeather, allChartData, allForecastItemList } = data;\n  const { city, countryCode } = useCityPage(\n    actions,\n    allChartData,\n    allForecastItemList\n  );\n  const cities = useMemo(() => [{ city, countryCode }], [city, countryCode]);\n  useCityList(cities, allWeather, actions);\n  const cityCode = getCityCode(city, countryCode);\n  const weather = allWeather[cityCode];\n  const chartData = allChartData[cityCode];\n  const forecastItemList = allForecastItemList[cityCode];\n  const state = weather && weather.state;\n  const temperature = weather && weather.temperature;\n  const humidity = weather && weather.humidity;\n  const wind = weather && weather.wind;\n\n  return (\n    <AppFrame>\n      <Grid\n        container\n        justifyContent=\"space-around\"\n        direction=\"column\"\n        spacing={2}\n      >\n        <Grid\n          item\n          container\n          xs={12}\n          justifyContent=\"center\"\n          alignItems=\"flex-end\"\n        >\n          <CityInfo city={city} countryCode={countryCode} />\n        </Grid>\n        <Grid item xs={12}>\n          <Weather state={state} temperature={temperature} />\n          {humidity && wind && (\n            <WeatherDetails humidity={humidity} wind={wind} />\n          )}\n        </Grid>\n        <Grid>{!chartData && !forecastItemList && <LinearProgress />}</Grid>\n        <Grid item>{chartData && <ForecastChart data={chartData} />}</Grid>\n        <Grid item>\n          {forecastItemList && <Forecast forecastItemList={forecastItemList} />}\n        </Grid>\n      </Grid>\n    </AppFrame>\n  );\n};\n\nexport default CityPage;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { IconContext } from \"react-icons\";\nimport { WiRain } from \"react-icons/wi\";\nconst NotFound = () => {\n  return (\n    <Grid container direction=\"column\" justifyContent=\"center\" className=\"full\">\n      <div className=\"highlight\">\n        <Grid item container xs={12} justifyContent=\"center\" alignItems=\"center\">\n          <Grid item>\n            <IconContext.Provider value={{ size: \"6em\" }}>\n              <WiRain />\n            </IconContext.Provider>\n          </Grid>\n          <Grid\n            item\n            container\n            direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"h4\" color=\"inherit\">\n              404|Page not found\n            </Typography>\n            <Link\n              color=\"inherit\"\n              aria-label=\"menu\"\n              component={RouterLink}\n              to=\"/main\"\n            >\n              Main\n            </Link>\n          </Grid>\n        </Grid>\n      </div>\n    </Grid>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WelcomePage from \"./Pages/WelcomePage\";\nimport MainPage from \"./Pages/MainPage\";\nimport CityPage from \"./Pages/CityPage\";\nimport NotFound from \"./Pages/NotFound\";\nimport { WeatherContext } from \"./WeatherContext\";\n\nconst App = () => {\n  return (\n    <WeatherContext>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <WelcomePage />\n          </Route>\n          <Route path=\"/main\">\n            <MainPage />\n          </Route>\n          <Route path=\"/city/:countryCode/:city\">\n            <CityPage />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    </WeatherContext>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}