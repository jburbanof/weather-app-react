{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = (cities, allWeather, actions) => {\n  _s();\n\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        const propName = [getCityCode(city, countryCode)];\n        actions({\n          type: 'SET_ALL_WEATHER',\n          payload: {\n            [propName]: {}\n          }\n        });\n        const response = await axios.get(url);\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n        actions({\n          type: 'SET_ALL_WEATHER',\n          payload: allWeatherAux\n        });\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      if (!allWeather[getCityCode(city, countryCode)]) {\n        setWeather(city, countryCode);\n      }\n    });\n  }, [cities, actions, allWeather]);\n  return {\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"JfhGochNIqPkY17zyDsXnSE7zLQ=\");\n\nexport default useCityList;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityList.jsx"],"names":["useState","useEffect","axios","getAllWeather","getWeatherUrl","getCityCode","useCityList","cities","allWeather","actions","error","setError","setWeather","city","countryCode","url","propName","type","payload","response","get","allWeatherAux","request","forEach"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBC,OAArB,KAAiC;AAAA;;AACnD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAC9C,YAAMC,GAAG,GAAGX,aAAa,CAACS,IAAD,EAAOC,WAAP,CAAzB;;AAEA,UAAI;AAEF,cAAME,QAAQ,GAAG,CAACX,WAAW,CAACQ,IAAD,EAAOC,WAAP,CAAZ,CAAjB;AACAL,QAAAA,OAAO,CAAC;AAACQ,UAAAA,IAAI,EAAE,iBAAP;AAA0BC,UAAAA,OAAO,EAAE;AAAC,aAACF,QAAD,GAAW;AAAZ;AAAnC,SAAD,CAAP;AACA,cAAMG,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUL,GAAV,CAAvB;AAEA,cAAMM,aAAa,GAAGlB,aAAa,CAACgB,QAAD,EAAWN,IAAX,EAAiBC,WAAjB,CAAnC;AAEAL,QAAAA,OAAO,CAAC;AAACQ,UAAAA,IAAI,EAAE,iBAAP;AAA0BC,UAAAA,OAAO,EAAEG;AAAnC,SAAD,CAAP;AACD,OATD,CASE,OAAOX,KAAP,EAAc;AACd,YAAIA,KAAK,CAACS,QAAV,EAAoB;AAClBR,UAAAA,QAAQ,CAAC,sBAAD,CAAR;AACD,SAFD,MAEO,IAAID,KAAK,CAACY,OAAV,EAAmB;AACxBX,UAAAA,QAAQ,CAAC,wBAAD,CAAR;AACD,SAFM,MAEA;AACLA,UAAAA,QAAQ,CAAC,mBAAD,CAAR;AACD;AACF;AACF,KArBD;;AAsBAJ,IAAAA,MAAM,CAACgB,OAAP,CAAe,CAAC;AAAEV,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AACxC,UAAG,CAACN,UAAU,CAACH,WAAW,CAACQ,IAAD,EAAOC,WAAP,CAAZ,CAAd,EAA+C;AAC7CF,QAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AACD;AAEF,KALD;AAMD,GA7BQ,EA6BN,CAACP,MAAD,EAASE,OAAT,EAAkBD,UAAlB,CA7BM,CAAT;AA8BA,SAAO;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAjCD;;GAAML,W;;AAmCN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = (cities, allWeather, actions) => {\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        \n        const propName = [getCityCode(city, countryCode)]\n        actions({type: 'SET_ALL_WEATHER', payload: {[propName]:{}}})\n        const response = await axios.get(url);\n\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n\n        actions({type: 'SET_ALL_WEATHER', payload: allWeatherAux})\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n    cities.forEach(({ city, countryCode }) => {\n      if(!allWeather[getCityCode(city, countryCode)]){\n        setWeather(city, countryCode);\n      }\n      \n    });\n  }, [cities, actions, allWeather]);\n  return { error, setError };\n};\n\nexport default useCityList;\n"]},"metadata":{},"sourceType":"module"}