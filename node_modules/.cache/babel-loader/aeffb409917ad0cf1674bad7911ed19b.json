{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCityCode = (city, countryCode) => `${city}-${countryCode}`;\n\nconst renderCityAndCountry = eventOnClickCity => (cityCountry, weather) => {\n  const {\n    city,\n    countryCode,\n    country\n  } = cityCountry;\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nconst useCityList = cities => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const response = await axios.get(url);\n        const {\n          data\n        } = response;\n        const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0));\n        const state = data.weather[0].main.toLowerCase();\n        const propName = getCityCode(city, countryCode);\n        const propValue = {\n          temperature,\n          state\n        };\n        setAllWeather(allWeather => ({ ...allWeather,\n          [propName]: propValue\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {\n    allWeather,\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"Zjm/TNEo0nrMGezFCAF38/DHJk0=\");\n\nconst CityList = ({\n  cities,\n  onClickCity\n}) => {\n  _s2();\n\n  const {\n    allWeather,\n    error,\n    setError\n  } = useCityList(cities);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(CityList, \"zQP2yUxAoKYXZzV19u8t0vzRNJ0=\", false, function () {\n  return [useCityList];\n});\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx"],"names":["React","useState","useEffect","PropTypes","axios","convertUnits","Grid","List","ListItem","Alert","CityInfo","Weather","getCityCode","city","countryCode","renderCityAndCountry","eventOnClickCity","cityCountry","weather","country","temperature","state","useCityList","cities","allWeather","setAllWeather","error","setError","setWeather","apiKey","url","response","get","data","Number","main","temp","from","to","toFixed","toLowerCase","propName","propValue","request","forEach","CityList","onClickCity","map","cityAndCountry","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\n\nconst getCityCode = (city, countryCode) => `${city}-${countryCode}`\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, countryCode, country } = cityCountry;\n  return (\n    <ListItem button key={getCityCode(city, countryCode)} onClick={() => eventOnClickCity(city, countryCode)}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <Grid item md={9} xs={12}>\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item md={3} xs={12}>\n          <Weather\n            temperature={weather && weather.temperature}\n            state={weather && weather.state}\n          />\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n};\n\nconst useCityList = (cities) => {\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const response = await axios.get(url);\n        const { data } = response;\n        const temperature = Number(\n          convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0)\n        );\n        const state = data.weather[0].main.toLowerCase();\n        const propName = getCityCode(city, countryCode );\n        const propValue = { temperature, state };\n        setAllWeather((allWeather) => ({\n          ...allWeather,\n          [propName]: propValue,\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n    cities.forEach(({ city, countryCode }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {allWeather, error, setError}\n}\n\nconst CityList = ({ cities, onClickCity }) => {\n  \n  const {allWeather, error, setError} = useCityList(cities)\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\n\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default CityList;\n"]},"metadata":{},"sourceType":"module"}