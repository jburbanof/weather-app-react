{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/ForecastChart/ForecastChart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForecastChart = ({\n  data\n}) => {\n  _s();\n\n  const marginSize = useMemo(() => ({\n    top: 20,\n    bottom: 20,\n    left: 5,\n    right: 5\n  }), []);\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    height: 250,\n    width: \"95%\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      margin: marginSize,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"dayHour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"max\",\n        stroke: \"#ff0000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"min\",\n        stroke: \"#0000ff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForecastChart, \"0c512f1idw9NPtshN/cXl3yafcQ=\");\n\n_c = ForecastChart;\nForecastChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    dayHour: PropTypes.string.isRequired,\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired\n  })).isRequired\n};\nForecastChart.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ForecastChart\",\n  \"props\": {\n    \"data\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"dayHour\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"min\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"max\": {\n              \"name\": \"number\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default ForecastChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastChart\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/Components/ForecastChart/ForecastChart.jsx\"] = {\n    name: \"ForecastChart\",\n    docgenInfo: ForecastChart.__docgenInfo,\n    path: \"src/Components/ForecastChart/ForecastChart.jsx\"\n  };\n}","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/ForecastChart/ForecastChart.jsx"],"names":["React","useMemo","PropTypes","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","ForecastChart","data","marginSize","top","bottom","left","right","propTypes","arrayOf","shape","dayHour","string","isRequired","min","number","max"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,SADF,EAEEC,IAFF,EAGEC,aAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,MAPF,EAQEC,mBARF,QASO,UATP;;;AAWA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAClC,QAAMC,UAAU,GAAGZ,OAAO,CACxB,OAAO;AAAEa,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,MAAM,EAAE,EAAnB;AAAuBC,IAAAA,IAAI,EAAE,CAA7B;AAAgCC,IAAAA,KAAK,EAAE;AAAvC,GAAP,CADwB,EAExB,EAFwB,CAA1B;AAIA,sBACE,QAAC,mBAAD;AAAqB,IAAA,MAAM,EAAE,GAA7B;AAAkC,IAAA,KAAK,EAAE,KAAzC;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,MAAM,EAAEJ,UAAnB;AAA+B,MAAA,IAAI,EAAED,IAArC;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,KAA9B;AAAoC,QAAA,MAAM,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,KAA9B;AAAoC,QAAA,MAAM,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAlBD;;GAAMD,a;;KAAAA,a;AAoBNA,aAAa,CAACO,SAAd,GAA0B;AACxBN,EAAAA,IAAI,EAAEV,SAAS,CAACiB,OAAV,CACJjB,SAAS,CAACkB,KAAV,CAAgB;AACdC,IAAAA,OAAO,EAAEnB,SAAS,CAACoB,MAAV,CAAiBC,UADZ;AAEdC,IAAAA,GAAG,EAAEtB,SAAS,CAACuB,MAAV,CAAiBF,UAFR;AAGdG,IAAAA,GAAG,EAAExB,SAAS,CAACuB,MAAV,CAAiBF;AAHR,GAAhB,CADI,EAMJA;AAPsB,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,eAAeZ,aAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst ForecastChart = ({ data }) => {\n  const marginSize = useMemo(\n    () => ({ top: 20, bottom: 20, left: 5, right: 5 }),\n    []\n  );\n  return (\n    <ResponsiveContainer height={250} width={\"95%\"}>\n      <LineChart margin={marginSize} data={data}>\n        <Legend></Legend>\n        <Tooltip></Tooltip>\n        <XAxis dataKey=\"dayHour\"></XAxis>\n        <YAxis></YAxis>\n        <CartesianGrid></CartesianGrid>\n        <Line type=\"monotone\" dataKey=\"max\" stroke=\"#ff0000\"></Line>\n        <Line type=\"monotone\" dataKey=\"min\" stroke=\"#0000ff\"></Line>\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nForecastChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      dayHour: PropTypes.string.isRequired,\n      min: PropTypes.number.isRequired,\n      max: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ForecastChart;\n"]},"metadata":{},"sourceType":"module"}