{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport getChartData from \"../Utilities/transform/getChartData\";\nimport { toCelsius } from \"../Utilities/utilities\";\nimport { getForecastUrl } from \"../Utilities/urls\";\n\nconst useCityPage = () => {\n  _s();\n\n  const [chartData, setChartData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const dataAux = getChartData(data);\n        setChartData(dataAux);\n        const interval = [3, 6, 9, 12, 15, 18];\n        const forecastItemListAux = data.list.filter((item, index) => interval.includes(index)).map(item => {\n          return {\n            hour: moment.unix(item.dt).hour(),\n            weekDay: moment.unix(item.dt).format(\"dddd\"),\n            state: item.weather[0].main.toLowerCase(),\n            temperature: toCelsius(item.main.temp)\n          };\n        });\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode]);\n  return {\n    city,\n    chartData,\n    forecastItemList\n  };\n};\n\n_s(useCityPage, \"Oq0LXJ0yq1/kUXy6RQ4H5Y/HF+A=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityPage.jsx"],"names":["useState","useEffect","useParams","moment","axios","getChartData","toCelsius","getForecastUrl","useCityPage","chartData","setChartData","forecastItemList","setForecastItemList","city","countryCode","getForecast","url","data","get","dataAux","interval","forecastItemListAux","list","filter","item","index","includes","map","hour","unix","dt","weekDay","format","state","weather","main","toLowerCase","temperature","temp","error","console","log"],"mappings":";;AAAA,SAAUA,QAAV,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAEa,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBZ,SAAS,EAAvC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,WAAW,GAAG,YAAY;AAE9B,YAAMC,GAAG,GAAGT,cAAc,CAACM,IAAD,EAAOC,WAAP,CAA1B;;AAEA,UAAI;AACF,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMb,KAAK,CAACc,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAMG,OAAO,GAAGd,YAAY,CAACY,IAAD,CAA5B;AAGAP,QAAAA,YAAY,CAACS,OAAD,CAAZ;AAEA,cAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,CAAjB;AAEA,cAAMC,mBAAmB,GAAGJ,IAAI,CAACK,IAAL,CACzBC,MADyB,CAClB,CAACC,IAAD,EAAOC,KAAP,KAAiBL,QAAQ,CAACM,QAAT,CAAkBD,KAAlB,CADC,EAEzBE,GAFyB,CAEpBH,IAAD,IAAU;AACb,iBAAO;AACLI,YAAAA,IAAI,EAAEzB,MAAM,CAAC0B,IAAP,CAAYL,IAAI,CAACM,EAAjB,EAAqBF,IAArB,EADD;AAELG,YAAAA,OAAO,EAAE5B,MAAM,CAAC0B,IAAP,CAAYL,IAAI,CAACM,EAAjB,EAAqBE,MAArB,CAA4B,MAA5B,CAFJ;AAGLC,YAAAA,KAAK,EAAET,IAAI,CAACU,OAAL,CAAa,CAAb,EAAgBC,IAAhB,CAAqBC,WAArB,EAHF;AAILC,YAAAA,WAAW,EAAC/B,SAAS,CAACkB,IAAI,CAACW,IAAL,CAAUG,IAAX;AAJhB,WAAP;AAMD,SATyB,CAA5B;AAUA1B,QAAAA,mBAAmB,CAACS,mBAAD,CAAnB;AACD,OApBD,CAoBE,OAAOkB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KA3BD;;AA6BA1B,IAAAA,WAAW;AACZ,GA/BQ,EA+BN,CAACF,IAAD,EAAOC,WAAP,CA/BM,CAAT;AAgCA,SAAO;AAACD,IAAAA,IAAD;AAAOJ,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CArCD;;GAAMH,W;UAG4BN,S;;;AAoClC,eAAeM,WAAf","sourcesContent":["import  { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport getChartData from \"../Utilities/transform/getChartData\";\nimport { toCelsius } from \"../Utilities/utilities\";\nimport { getForecastUrl } from \"../Utilities/urls\";\n\n\nconst useCityPage = () => {\n    const [chartData, setChartData] = useState(null);\n    const [forecastItemList, setForecastItemList] = useState(null);\n    const { city, countryCode } = useParams();\n    useEffect(() => {\n      const getForecast = async () => {\n        \n        const url = getForecastUrl(city, countryCode)\n  \n        try {\n          const { data } = await axios.get(url);\n          const dataAux = getChartData(data)\n          \n  \n          setChartData(dataAux);\n  \n          const interval = [3, 6, 9, 12, 15, 18];\n  \n          const forecastItemListAux = data.list\n            .filter((item, index) => interval.includes(index))\n            .map((item) => {\n              return {\n                hour: moment.unix(item.dt).hour(),\n                weekDay: moment.unix(item.dt).format(\"dddd\"),\n                state: item.weather[0].main.toLowerCase(),\n                temperature:toCelsius(item.main.temp),\n              };\n            });\n          setForecastItemList(forecastItemListAux);\n        } catch (error) {\n          console.log(\"Error\");\n        }\n      };\n  \n      getForecast();\n    }, [city, countryCode]);\n    return {city, chartData, forecastItemList}\n}\n\nexport default useCityPage"]},"metadata":{},"sourceType":"module"}