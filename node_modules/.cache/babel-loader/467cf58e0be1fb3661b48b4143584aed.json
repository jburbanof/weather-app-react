{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WelcomePage from \"./Pages/WelcomePage\";\nimport MainPage from \"./Pages/MainPage\";\nimport CityPage from \"./Pages/CityPage\";\nimport NotFound from \"./Pages/NotFound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [allChartData, setChartData] = useState(null);\n  const [allForecastItemList, setForecastItemList] = useState(null);\n  const onSetAllWeather = useCallback(weatherCity => {\n    setAllWeather(allWeather => {\n      return { ...allWeather,\n        ...weatherCity\n      };\n    });\n  }, [setAllWeather]);\n  const onSetChartData = useCallback(chartDataCity => {\n    setChartData(allChartData => {\n      return { ...allChartData,\n        ...chartDataCity\n      };\n    });\n  }, [setChartData]);\n  const onSetForecastItemList = useCallback(forecastItemListCity => {\n    setForecastItemList(allForecastItemList => {\n      return { ...allForecastItemList,\n        ...forecastItemListCity\n      };\n    });\n  }, [setForecastItemList]);\n  const actions = useMemo(() => ({\n    onSetAllWeather,\n    onSetChartData,\n    onSetForecastItemList\n  }), [onSetAllWeather, onSetChartData, onSetForecastItemList]);\n  const data = useMemo(() => ({\n    allWeather,\n    chartData: allChartData,\n    forecastItemList: allForecastItemList\n  }), [allWeather, allChartData, allForecastItemList]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(WelcomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/main\",\n        children: /*#__PURE__*/_jsxDEV(MainPage, {\n          data: data,\n          actions: actions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/city/:countryCode/:city\",\n        children: /*#__PURE__*/_jsxDEV(CityPage, {\n          data: data,\n          actions: actions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"YGnbbxLEQuX6HW8tQY9NQ+4k/Lc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/App.jsx"],"names":["React","useState","useCallback","useMemo","BrowserRouter","Router","Switch","Route","WelcomePage","MainPage","CityPage","NotFound","App","allWeather","setAllWeather","allChartData","setChartData","allForecastItemList","setForecastItemList","onSetAllWeather","weatherCity","onSetChartData","chartDataCity","onSetForecastItemList","forecastItemListCity","actions","data","chartData","forecastItemList"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WelcomePage from \"./Pages/WelcomePage\";\nimport MainPage from \"./Pages/MainPage\";\nimport CityPage from \"./Pages/CityPage\";\nimport NotFound from \"./Pages/NotFound\";\nconst App = () => {\n  const [allWeather, setAllWeather] = useState({});\n  const [allChartData, setChartData] = useState(null);\n  const [allForecastItemList, setForecastItemList] = useState(null);\n  const onSetAllWeather = useCallback(\n    (weatherCity) => {\n      setAllWeather((allWeather) => {\n        return { ...allWeather, ...weatherCity };\n      });\n    },\n    [setAllWeather]\n  );\n  const onSetChartData = useCallback((chartDataCity) => {\n    setChartData((allChartData) => {\n      return { ...allChartData, ...chartDataCity };\n    });\n  },[setChartData]);\n  const onSetForecastItemList = useCallback((forecastItemListCity) => {\n    setForecastItemList((allForecastItemList) => {\n      return { ...allForecastItemList, ...forecastItemListCity };\n    });\n  },[setForecastItemList]);\n  const actions = useMemo(\n    () => ({\n      onSetAllWeather,\n      onSetChartData,\n      onSetForecastItemList,\n    }),\n    [onSetAllWeather, onSetChartData, onSetForecastItemList]\n  );\n  const data = useMemo(\n    () => ({\n      allWeather,\n      chartData: allChartData,\n      forecastItemList: allForecastItemList,\n    }),\n    [allWeather, allChartData, allForecastItemList]\n  );\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <WelcomePage />\n        </Route>\n        <Route path=\"/main\">\n          <MainPage data={data} actions={actions} />\n        </Route>\n        <Route path=\"/city/:countryCode/:city\">\n          <CityPage data={data} actions={actions} />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}