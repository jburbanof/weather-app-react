{"ast":null,"code":"import _regeneratorRuntime from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _asyncToGenerator from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import axios from\"axios\";import getAllWeather from\"../Utilities/transform/getAllWeather\";import{getWeatherUrl}from\"../Utilities/urls\";import{getCityCode}from\"../Utilities/utilities\";var useCityList=function useCityList(cities,allWeather,actions){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];useEffect(function(){var setWeather=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(city,countryCode){var url,propName,response,allWeatherAux;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=getWeatherUrl(city,countryCode);_context.prev=1;propName=[getCityCode(city,countryCode)];actions({type:'SET_ALL_WEATHER',payload:_defineProperty({},propName,{})});_context.next=6;return axios.get(url);case 6:response=_context.sent;allWeatherAux=getAllWeather(response,city,countryCode);actions({type:'SET_ALL_WEATHER',payload:allWeatherAux});_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);if(_context.t0.response){setError(\"Weather Server Error\");}else if(_context.t0.request){setError(\"Verify Your Connection\");}else{setError(\"Un-expected Error\");}case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return function setWeather(_x,_x2){return _ref.apply(this,arguments);};}();cities.forEach(function(_ref2){var city=_ref2.city,countryCode=_ref2.countryCode;if(!allWeather[getCityCode(city,countryCode)]){setWeather(city,countryCode);}});},[cities,actions,allWeather]);return{error:error,setError:setError};};export default useCityList;","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/Hooks/useCityList.jsx"],"names":["useState","useEffect","axios","getAllWeather","getWeatherUrl","getCityCode","useCityList","cities","allWeather","actions","error","setError","setWeather","city","countryCode","url","propName","type","payload","get","response","allWeatherAux","request","forEach"],"mappings":"mgBAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,aAAP,KAA0B,sCAA1B,CACA,OAASC,aAAT,KAA8B,mBAA9B,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASC,UAAT,CAAqBC,OAArB,CAAiC,CACnD,cAA0BT,QAAQ,CAAC,IAAD,CAAlC,wCAAOU,KAAP,eAAcC,QAAd,eACAV,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,UAAU,0FAAG,iBAAOC,IAAP,CAAaC,WAAb,0JACXC,GADW,CACLX,aAAa,CAACS,IAAD,CAAOC,WAAP,CADR,iBAKTE,QALS,CAKE,CAACX,WAAW,CAACQ,IAAD,CAAOC,WAAP,CAAZ,CALF,CAMfL,OAAO,CAAC,CAACQ,IAAI,CAAE,iBAAP,CAA0BC,OAAO,oBAAIF,QAAJ,CAAc,EAAd,CAAjC,CAAD,CAAP,CANe,sBAOQd,CAAAA,KAAK,CAACiB,GAAN,CAAUJ,GAAV,CAPR,QAOTK,QAPS,eASTC,aATS,CASOlB,aAAa,CAACiB,QAAD,CAAWP,IAAX,CAAiBC,WAAjB,CATpB,CAWfL,OAAO,CAAC,CAACQ,IAAI,CAAE,iBAAP,CAA0BC,OAAO,CAAEG,aAAnC,CAAD,CAAP,CAXe,iFAaf,GAAI,YAAMD,QAAV,CAAoB,CAClBT,QAAQ,CAAC,sBAAD,CAAR,CACD,CAFD,IAEO,IAAI,YAAMW,OAAV,CAAmB,CACxBX,QAAQ,CAAC,wBAAD,CAAR,CACD,CAFM,IAEA,CACLA,QAAQ,CAAC,mBAAD,CAAR,CACD,CAnBc,qEAAH,kBAAVC,CAAAA,UAAU,gDAAhB,CAsBAL,MAAM,CAACgB,OAAP,CAAe,eAA2B,IAAxBV,CAAAA,IAAwB,OAAxBA,IAAwB,CAAlBC,WAAkB,OAAlBA,WAAkB,CACxC,GAAG,CAACN,UAAU,CAACH,WAAW,CAACQ,IAAD,CAAOC,WAAP,CAAZ,CAAd,CAA+C,CAC7CF,UAAU,CAACC,IAAD,CAAOC,WAAP,CAAV,CACD,CAEF,CALD,EAMD,CA7BQ,CA6BN,CAACP,MAAD,CAASE,OAAT,CAAkBD,UAAlB,CA7BM,CAAT,CA8BA,MAAO,CAAEE,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAP,CACD,CAjCD,CAmCA,cAAeL,CAAAA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = (cities, allWeather, actions) => {\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        \n        const propName = [getCityCode(city, countryCode)]\n        actions({type: 'SET_ALL_WEATHER', payload: {[propName]:{}}})\n        const response = await axios.get(url);\n\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n\n        actions({type: 'SET_ALL_WEATHER', payload: allWeatherAux})\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n    cities.forEach(({ city, countryCode }) => {\n      if(!allWeather[getCityCode(city, countryCode)]){\n        setWeather(city, countryCode);\n      }\n      \n    });\n  }, [cities, actions, allWeather]);\n  return { error, setError };\n};\n\nexport default useCityList;\n"]},"metadata":{},"sourceType":"module"}