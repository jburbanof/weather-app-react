{"ast":null,"code":"import _objectSpread from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import Grid from\"@material-ui/core/Grid\";import List from\"@material-ui/core/List\";import ListItem from\"@material-ui/core/ListItem\";import Alert from\"@material-ui/lab/Alert\";import useCityList from\"../../Hooks/useCityList\";import CityInfo from\"../CityInfo\";import Weather from\"../Weather\";import{AiFillDelete}from\"react-icons/ai\";import{IconContext}from\"react-icons\";import{getCityCode}from\"../../Utilities/utilities\";import{useWeatherStateContext,useWeatherDispatchContext}from\"../../WeatherContext\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CityListItem=/*#__PURE__*/React.memo(function(_ref){var city=_ref.city,countryCode=_ref.countryCode,weather=_ref.weather,eventOnClickCity=_ref.eventOnClickCity,eventOnClickDelete=_ref.eventOnClickDelete;return/*#__PURE__*/_jsxs(\"div\",{className:\"cityItem\",children:[/*#__PURE__*/_jsx(ListItem,{button:true,onClick:function onClick(){return eventOnClickCity(city,countryCode);},children:/*#__PURE__*/_jsxs(Grid,{container:true,justifyContent:\"center\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Grid,{item:true,md:6,xs:12,children:/*#__PURE__*/_jsx(CityInfo,{city:city,countryCode:countryCode})}),/*#__PURE__*/_jsx(Grid,{item:true,md:3,xs:12,children:/*#__PURE__*/_jsx(Weather,{temperature:weather&&weather.temperature,state:weather&&weather.state})})]})}),/*#__PURE__*/_jsx(IconContext.Provider,{value:{size:\"2em\"},children:/*#__PURE__*/_jsx(AiFillDelete,{className:\"delete\",onClick:function onClick(){return eventOnClickDelete(city);}})})]});});var renderCityAndCountry=function renderCityAndCountry(eventOnClickCity){return function(cityCountry,weather,eventOnClickDelete){var city=cityCountry.city,countryCode=cityCountry.countryCode;return/*#__PURE__*/_jsx(CityListItem,_objectSpread(_objectSpread({eventOnClickCity:eventOnClickCity,eventOnClickDelete:eventOnClickDelete,weather:weather},cityCountry),{},{city:city}),getCityCode(city,countryCode));};};var CityList=function CityList(_ref2){var cities=_ref2.cities,onClickCity=_ref2.onClickCity,eventOnClickDelete=_ref2.eventOnClickDelete;var actions=useWeatherDispatchContext();var data=useWeatherStateContext();var allWeather=data.allWeather;var _useCityList=useCityList(cities,allWeather,actions),error=_useCityList.error,setError=_useCityList.setError;return/*#__PURE__*/_jsxs(\"div\",{children:[error&&/*#__PURE__*/_jsx(Alert,{onClose:function onClose(){return setError(null);},severity:\"error\",children:error}),/*#__PURE__*/_jsx(List,{children:cities.map(function(cityAndCountry){return renderCityAndCountry(onClickCity)(cityAndCountry,allWeather[getCityCode(cityAndCountry.city,cityAndCountry.countryCode)],eventOnClickDelete,cityAndCountry.city);})})]});};export default/*#__PURE__*/React.memo(CityList);","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/Components/CityList/CityList.jsx"],"names":["React","Grid","List","ListItem","Alert","useCityList","CityInfo","Weather","AiFillDelete","IconContext","getCityCode","useWeatherStateContext","useWeatherDispatchContext","CityListItem","memo","city","countryCode","weather","eventOnClickCity","eventOnClickDelete","temperature","state","size","renderCityAndCountry","cityCountry","CityList","cities","onClickCity","actions","data","allWeather","error","setError","map","cityAndCountry"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport {\n  useWeatherStateContext,\n  useWeatherDispatchContext,\n} from \"../../WeatherContext\";\n\nconst CityListItem = React.memo(\n  ({ city, countryCode, weather, eventOnClickCity, eventOnClickDelete }) => {\n    return (\n      <div className='cityItem'>\n        <ListItem button onClick={() => eventOnClickCity(city, countryCode)}>\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Grid item md={6} xs={12}>\n              <CityInfo city={city} countryCode={countryCode} />\n            </Grid>\n            <Grid item md={3} xs={12}>\n              <Weather\n                temperature={weather && weather.temperature}\n                state={weather && weather.state}\n              />\n            </Grid>\n          </Grid>\n        </ListItem>\n        <IconContext.Provider value={{ size: \"2em\" }}>\n          <AiFillDelete className=\"delete\" onClick={() => eventOnClickDelete(city)}/>\n        </IconContext.Provider>\n      </div>\n    );\n  }\n);\n\nconst renderCityAndCountry = (eventOnClickCity,) => (cityCountry, weather, eventOnClickDelete,) => {\n  const { city, countryCode } = cityCountry;\n  return (\n    <CityListItem\n      key={getCityCode(city, countryCode)}\n      eventOnClickCity={eventOnClickCity}\n      eventOnClickDelete={eventOnClickDelete}\n      weather={weather}\n      {...cityCountry}\n      city={city}\n    />\n  );\n};\n\nconst CityList = ({ cities, onClickCity, eventOnClickDelete }) => {\n  const actions = useWeatherDispatchContext();\n  const data = useWeatherStateContext();\n  const { allWeather } = data;\n  const { error, setError } = useCityList(cities, allWeather, actions);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n    \n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ],\n            eventOnClickDelete,\n            cityAndCountry.city\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CityList);\n"]},"metadata":{},"sourceType":"module"}