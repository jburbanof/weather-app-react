{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Pages/CityPage.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport Grid from \"@material-ui/core/Grid\";\nimport moment from \"moment\";\nimport { useParams } from \"react-router-dom\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useCityPage = () => {\n  _s();\n\n  const [chartData, setChartData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        console.log(\"data\", data);\n\n        const toCelsius = temp => convertUnits(temp).from(\"K\").to(\"C\");\n\n        const daysAhead = [0, 1, 2, 3, 4, 5];\n        const days = daysAhead.map(d => moment().add(d, \"d\"));\n        const dataAux = days.map(day => {\n          const tempObjArray = data.list.filter(item => {\n            const dayOfYear = moment.unix(item.dt).dayOfYear();\n            return dayOfYear === day.dayOfYear();\n          });\n          console.log(\"dia\", day.dayOfYear());\n          console.log(tempObjArray);\n          const temps = tempObjArray.map(item => item.main.temp);\n          return {\n            dayHour: day.format(\"dddd\"),\n            min: Number(toCelsius(Math.min(...temps)).toFixed(0)),\n            max: Number(toCelsius(Math.max(...temps)).toFixed(0)),\n            hasTemps: temps.length > 0 ? true : false\n          };\n        }).filter(item => item.hastTemps);\n        setChartData(dataAux);\n        const interval = [3, 6, 9, 12, 15, 18];\n        const forecastItemListAux = data.list.filter((item, index) => interval.includes(index)).map(item => {\n          return {\n            hour: moment.unix(item.dt).hour(),\n            weekDay: moment.unix(item.dt).format(\"dddd\"),\n            state: item.weather[0].main.toLowerCase(),\n            temperature: Number(toCelsius(item.main.temp).toFixed(0))\n          };\n        });\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode]);\n  return {\n    city,\n    chartData,\n    forecastItemList\n  };\n};\n\n_s(useCityPage, \"Oq0LXJ0yq1/kUXy6RQ4H5Y/HF+A=\", false, function () {\n  return [useParams];\n});\n\nconst CityPage = () => {\n  _s2();\n\n  const {\n    city,\n    chartData,\n    forecastItemList\n  } = useCityPage();\n  const country = \"Argentina\";\n  const state = \"clouds\";\n  const temperature = 20;\n  const humidity = 80;\n  const wind = 5; //const data = dataExample;\n  //const forecastItemList = forecastItemListExample;\n\n  return /*#__PURE__*/_jsxDEV(AppFrame, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-around\",\n      direction: \"column\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        justifyContent: \"center\",\n        alignItems: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Weather, {\n          state: state,\n          temperature: temperature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherDetails, {\n          humidity: humidity,\n          wind: wind\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: chartData && /*#__PURE__*/_jsxDEV(ForecastChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: forecastItemList && /*#__PURE__*/_jsxDEV(Forecast, {\n          forecastItemList: forecastItemList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(CityPage, \"YTOWzynj/q62DchnZzUoOHIxo7g=\", false, function () {\n  return [useCityPage];\n});\n\n_c = CityPage;\nexport default CityPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityPage\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Pages/CityPage.jsx"],"names":["React","useState","useEffect","axios","convertUnits","Grid","moment","useParams","CityInfo","Weather","WeatherDetails","ForecastChart","Forecast","AppFrame","useCityPage","chartData","setChartData","forecastItemList","setForecastItemList","city","countryCode","getForecast","apiKey","url","data","get","console","log","toCelsius","temp","from","to","daysAhead","days","map","d","add","dataAux","day","tempObjArray","list","filter","item","dayOfYear","unix","dt","temps","main","dayHour","format","min","Number","Math","toFixed","max","hasTemps","length","hastTemps","interval","forecastItemListAux","index","includes","hour","weekDay","state","weather","toLowerCase","temperature","error","CityPage","country","humidity","wind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport Grid from \"@material-ui/core/Grid\";\nimport moment from \"moment\";\nimport { useParams } from \"react-router-dom\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\n\n\nconst useCityPage = () => {\n  const [chartData, setChartData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const { city, countryCode } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const { data } = await axios.get(url);\n        console.log(\"data\", data);\n        const toCelsius = (temp) => convertUnits(temp).from(\"K\").to(\"C\");\n        const daysAhead = [0, 1, 2, 3, 4, 5];\n        const days = daysAhead.map((d) => moment().add(d, \"d\"));\n        const dataAux = days.map((day) => {\n          const tempObjArray = data.list.filter((item) => {\n            const dayOfYear = moment.unix(item.dt).dayOfYear();\n            return dayOfYear === day.dayOfYear();\n          });\n          console.log(\"dia\", day.dayOfYear());\n          console.log(tempObjArray);\n          const temps = tempObjArray.map((item) => item.main.temp);\n\n          return {\n            dayHour: day.format(\"dddd\"),\n            min: Number(toCelsius(Math.min(...temps)).toFixed(0)),\n            max: Number(toCelsius(Math.max(...temps)).toFixed(0)),\n            hasTemps: (temps.length > 0 ? true : false )\n          };\n        }).filter(item => item.hastTemps);\n\n        setChartData(dataAux);\n\n        const interval = [3, 6, 9, 12, 15, 18];\n\n        const forecastItemListAux = data.list\n          .filter((item, index) => interval.includes(index))\n          .map((item) => {\n            return {\n              hour: moment.unix(item.dt).hour(),\n              weekDay: moment.unix(item.dt).format(\"dddd\"),\n              state: item.weather[0].main.toLowerCase(),\n              temperature: Number(toCelsius(item.main.temp).toFixed(0)),\n            };\n          });\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode]);\n  return {city, chartData, forecastItemList}\n}\n\nconst CityPage = () => {\n  \n  const {city, chartData, forecastItemList} = useCityPage()\n\n  const country = \"Argentina\";\n  const state = \"clouds\";\n  const temperature = 20;\n  const humidity = 80;\n  const wind = 5;\n  //const data = dataExample;\n  //const forecastItemList = forecastItemListExample;\n\n  return (\n    <AppFrame>\n      <Grid\n        container\n        justifyContent=\"space-around\"\n        direction=\"column\"\n        spacing={2}\n      >\n        <Grid\n          item\n          container\n          xs={12}\n          justifyContent=\"center\"\n          alignItems=\"flex-end\"\n        >\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item xs={12}>\n          <Weather state={state} temperature={temperature} />\n          <WeatherDetails humidity={humidity} wind={wind} />\n        </Grid>\n        <Grid item>{chartData && <ForecastChart data={chartData} />}</Grid>\n        <Grid item>\n          {forecastItemList && <Forecast forecastItemList={forecastItemList} />}\n        </Grid>\n      </Grid>\n    </AppFrame>\n  );\n};\n\nexport default CityPage;\n"]},"metadata":{},"sourceType":"module"}