{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport getChartData from \"../Utilities/transform/getChartData\";\nimport { getForecastUrl } from \"../Utilities/urls\";\nimport getForecastItemList from \"../Utilities/transform/getForecastItemList\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityPage = (actions, allChartData, allForecastItemList) => {\n  _s();\n\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const cityCode = getCityCode(city, countryCode);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const dataAux = getChartData(data); //onSetChartData({ [cityCode]: dataAux });\n\n        actions({\n          type: 'SET_CHART_DATA',\n          payload: {\n            [cityCode]: dataAux\n          }\n        });\n        const forecastItemListAux = getForecastItemList(data); //onSetForecastItemList({ [cityCode]: forecastItemListAux });\n\n        actions({\n          type: 'SET_FORECAST_ITEM_LIST',\n          payload: {\n            [cityCode]: forecastItemListAux\n          }\n        });\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    const cityCode = getCityCode(city, countryCode);\n\n    if (allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]) {\n      getForecast();\n    }\n  }, [city, countryCode, actions, allChartData, allForecastItemList]);\n  return {\n    city,\n    countryCode\n  };\n};\n\n_s(useCityPage, \"K5IKzcF800rXzW86+R9cAGqvAj8=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityPage.jsx"],"names":["useEffect","useParams","axios","getChartData","getForecastUrl","getForecastItemList","getCityCode","useCityPage","actions","allChartData","allForecastItemList","city","countryCode","getForecast","url","cityCode","data","get","dataAux","type","payload","forecastItemListAux","error","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,YAAV,EAAwBC,mBAAxB,KAAiD;AAAA;;AACnE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBX,SAAS,EAAvC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,WAAW,GAAG,YAAY;AAC9B,YAAMC,GAAG,GAAGV,cAAc,CAACO,IAAD,EAAOC,WAAP,CAA1B;AACA,YAAMG,QAAQ,GAAGT,WAAW,CAACK,IAAD,EAAOC,WAAP,CAA5B;;AACA,UAAI;AACF,cAAM;AAAEI,UAAAA;AAAF,YAAW,MAAMd,KAAK,CAACe,GAAN,CAAUH,GAAV,CAAvB;AACA,cAAMI,OAAO,GAAGf,YAAY,CAACa,IAAD,CAA5B,CAFE,CAIF;;AACAR,QAAAA,OAAO,CAAC;AAACW,UAAAA,IAAI,EAAE,gBAAP;AAAyBC,UAAAA,OAAO,EAAE;AAAC,aAACL,QAAD,GAAYG;AAAb;AAAlC,SAAD,CAAP;AACA,cAAMG,mBAAmB,GAAGhB,mBAAmB,CAACW,IAAD,CAA/C,CANE,CAOF;;AACAR,QAAAA,OAAO,CAAC;AAACW,UAAAA,IAAI,EAAE,wBAAP;AAAiCC,UAAAA,OAAO,EAAE;AAAC,aAACL,QAAD,GAAYM;AAAb;AAA1C,SAAD,CAAP;AACD,OATD,CASE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KAfD;;AAgBA,UAAMT,QAAQ,GAAGT,WAAW,CAACK,IAAD,EAAOC,WAAP,CAA5B;;AACA,QAAGH,YAAY,IAAIC,mBAAhB,IAAuC,CAACD,YAAY,CAACM,QAAD,CAApD,IAAkE,CAACL,mBAAmB,CAACK,QAAD,CAAzF,EAAoG;AAClGF,MAAAA,WAAW;AACZ;AAEF,GAtBQ,EAsBN,CAACF,IAAD,EAAOC,WAAP,EAAoBJ,OAApB,EAA6BC,YAA7B,EAA2CC,mBAA3C,CAtBM,CAAT;AAuBA,SAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD,CA1BD;;GAAML,W;UAC0BN,S;;;AA2BhC,eAAeM,WAAf","sourcesContent":["import { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport getChartData from \"../Utilities/transform/getChartData\";\nimport { getForecastUrl } from \"../Utilities/urls\";\nimport getForecastItemList from \"../Utilities/transform/getForecastItemList\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityPage = (actions, allChartData, allForecastItemList ) => {\n  const { city, countryCode } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const cityCode = getCityCode(city, countryCode);\n      try {\n        const { data } = await axios.get(url);\n        const dataAux = getChartData(data);\n\n        //onSetChartData({ [cityCode]: dataAux });\n        actions({type: 'SET_CHART_DATA', payload: {[cityCode]: dataAux}})\n        const forecastItemListAux = getForecastItemList(data);\n        //onSetForecastItemList({ [cityCode]: forecastItemListAux });\n        actions({type: 'SET_FORECAST_ITEM_LIST', payload: {[cityCode]: forecastItemListAux}})\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n    const cityCode = getCityCode(city, countryCode)\n    if(allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]){\n      getForecast();\n    }\n    \n  }, [city, countryCode, actions, allChartData, allForecastItemList]);\n  return { city, countryCode };\n};\n\nexport default useCityPage;\n"]},"metadata":{},"sourceType":"module"}