{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Pages/CityPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\nimport useCityPage from \"../Hooks/useCityPage\";\nimport useCityList from \"../Hooks/useCityList\";\nimport { getCityCode } from \"../Utilities/utilities\";\nimport { getCountry } from \"../Utilities/serviceCities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CityPage = () => {\n  _s();\n\n  const {\n    city,\n    countryCode,\n    chartData,\n    forecastItemList\n  } = useCityPage();\n  const {\n    allWeather\n  } = useCityList([{\n    city,\n    countryCode\n  }]);\n  const weather = allWeather[getCityCode(city, countryCode)];\n  console.log('weather', allWeather);\n  const country = countryCode && getCountry(countryCode);\n  const state = weather && weather.state;\n  const temperature = weather && weather.temperature;\n  const humidity = weather && weather.humidity;\n  const wind = weather && weather.wind;\n  return /*#__PURE__*/_jsxDEV(AppFrame, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-around\",\n      direction: \"column\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        justifyContent: \"center\",\n        alignItems: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Weather, {\n          state: state,\n          temperature: temperature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherDetails, {\n          humidity: humidity,\n          wind: wind\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: !chartData && !forecastItemList && /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: chartData && /*#__PURE__*/_jsxDEV(ForecastChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: forecastItemList && /*#__PURE__*/_jsxDEV(Forecast, {\n          forecastItemList: forecastItemList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityPage, \"8CYwd0t9fKVLvALQUwcMKVx9nh8=\", false, function () {\n  return [useCityPage, useCityList];\n});\n\n_c = CityPage;\nexport default CityPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityPage\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Pages/CityPage.jsx"],"names":["React","Grid","LinearProgress","CityInfo","Weather","WeatherDetails","ForecastChart","Forecast","AppFrame","useCityPage","useCityList","getCityCode","getCountry","CityPage","city","countryCode","chartData","forecastItemList","allWeather","weather","console","log","country","state","temperature","humidity","wind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\nimport useCityPage from \"../Hooks/useCityPage\";\nimport useCityList from \"../Hooks/useCityList\"\nimport { getCityCode } from \"../Utilities/utilities\";\nimport { getCountry } from \"../Utilities/serviceCities\";\nconst CityPage = () => {\n  const { city, countryCode, chartData, forecastItemList } = useCityPage();\n  const { allWeather } = useCityList([{city, countryCode}])\n  const weather = allWeather[getCityCode(city, countryCode)]\n  console.log('weather',allWeather)\n  const country = countryCode && getCountry(countryCode);\n  const state = weather && weather.state;\n  const temperature = weather && weather.temperature;\n  const humidity = weather && weather.humidity;\n  const wind = weather && weather.wind;\n\n  return (\n    <AppFrame>\n      <Grid\n        container\n        justifyContent=\"space-around\"\n        direction=\"column\"\n        spacing={2}\n      >\n        <Grid\n          item\n          container\n          xs={12}\n          justifyContent=\"center\"\n          alignItems=\"flex-end\"\n        >\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item xs={12}>\n          <Weather state={state} temperature={temperature} />\n          <WeatherDetails humidity={humidity} wind={wind} />\n        </Grid>\n        <Grid>{!chartData && !forecastItemList && <LinearProgress />}</Grid>\n        <Grid item>{chartData && <ForecastChart data={chartData} />}</Grid>\n        <Grid item>\n          {forecastItemList && <Forecast forecastItemList={forecastItemList} />}\n        </Grid>\n      </Grid>\n    </AppFrame>\n  );\n};\n\nexport default CityPage;\n"]},"metadata":{},"sourceType":"module"}