{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/Forcast/Forecast.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ForecastItem from \"../ForecastItem\";\nimport { validValues } from \"../IconState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderForecastItem = forecast => {\n  const {\n    weekDay,\n    hour,\n    state,\n    temperature\n  } = forecast;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    \"data-test-id\": \"forecast-item-container\",\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(ForecastItem, {\n      weekDay: weekDay,\n      hour: hour,\n      state: state,\n      temperature: temperature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, `${weekDay} ${hour}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\nconst Forecast = ({\n  forecastItemList\n}) => {\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    children: forecastItemList.map(forecast => renderForecastItem(forecast))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Forecast;\nForecast.propTypes = {\n  forecastIltemList: PropTypes.arrayOf(PropTypes.shape({\n    weekDay: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    state: PropTypes.oneOf(validValues).isRequired,\n    temperature: PropTypes.number.isRequired\n  }).isRequired)\n};\nForecast.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Forecast\",\n  \"props\": {\n    \"forecastIltemList\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"weekDay\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"hour\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"state\": {\n              \"name\": \"enum\",\n              \"computed\": true,\n              \"value\": \"validValues\",\n              \"required\": true\n            },\n            \"temperature\": {\n              \"name\": \"number\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/Components/Forcast/Forecast.jsx\"] = {\n    name: \"Forecast\",\n    docgenInfo: Forecast.__docgenInfo,\n    path: \"src/Components/Forcast/Forecast.jsx\"\n  };\n}","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/Forcast/Forecast.jsx"],"names":["React","PropTypes","Grid","ForecastItem","validValues","renderForecastItem","forecast","weekDay","hour","state","temperature","Forecast","forecastItemList","map","propTypes","forecastIltemList","arrayOf","shape","string","isRequired","number","oneOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,WAAT,QAA4B,cAA5B;;;AAEA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAwCJ,QAA9C;AACA,sBACE,QAAC,IAAD;AAAM,oBAAa,yBAAnB;AAA6C,IAAA,IAAI,MAAjD;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,OAAO,EAAEC,OADX;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,WAAW,EAAEC;AAJf;AAAA;AAAA;AAAA;AAAA;AADF,KAAwD,GAAEH,OAAQ,IAAGC,IAAK,EAA1E;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAZD;;AAcA,MAAMG,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AACzC,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,QAAxB;AAAiC,IAAA,UAAU,EAAC,QAA5C;AAAA,cACGA,gBAAgB,CAACC,GAAjB,CAAsBP,QAAD,IAAcD,kBAAkB,CAACC,QAAD,CAArD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;KAAMK,Q;AAQNA,QAAQ,CAACG,SAAT,GAAqB;AACnBC,EAAAA,iBAAiB,EAAEd,SAAS,CAACe,OAAV,CACjBf,SAAS,CAACgB,KAAV,CAAgB;AACdV,IAAAA,OAAO,EAAEN,SAAS,CAACiB,MAAV,CAAiBC,UADZ;AAEdX,IAAAA,IAAI,EAAEP,SAAS,CAACmB,MAAV,CAAiBD,UAFT;AAGdV,IAAAA,KAAK,EAAER,SAAS,CAACoB,KAAV,CAAgBjB,WAAhB,EAA6Be,UAHtB;AAIdT,IAAAA,WAAW,EAAET,SAAS,CAACmB,MAAV,CAAiBD;AAJhB,GAAhB,EAKGA,UANc;AADA,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,eAAeR,QAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ForecastItem from \"../ForecastItem\";\nimport { validValues } from \"../IconState\";\n\nconst renderForecastItem = (forecast) => {\n  const { weekDay, hour, state, temperature } = forecast;\n  return (\n    <Grid data-test-id=\"forecast-item-container\" item key={`${weekDay} ${hour}`}>\n      <ForecastItem\n        weekDay={weekDay}\n        hour={hour}\n        state={state}\n        temperature={temperature}\n      ></ForecastItem>\n    </Grid>\n  );\n};\n\nconst Forecast = ({ forecastItemList }) => {\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\">\n      {forecastItemList.map((forecast) => renderForecastItem(forecast))}\n    </Grid>\n  );\n};\n\nForecast.propTypes = {\n  forecastIltemList: PropTypes.arrayOf(\n    PropTypes.shape({\n      weekDay: PropTypes.string.isRequired,\n      hour: PropTypes.number.isRequired,\n      state: PropTypes.oneOf(validValues).isRequired,\n      temperature: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}