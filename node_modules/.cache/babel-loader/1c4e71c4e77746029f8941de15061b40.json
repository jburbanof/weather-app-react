{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport { validValues } from \"../Components/IconState\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = cities => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const response = await axios.get(url);\n        const {\n          data\n        } = response;\n        const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0));\n        const stateFromServer = data.weather[0].main.toLowerCase();\n        const state = validValues.includes(stateFromServer) ? stateFromServer : null;\n        const propName = getCityCode(city, countryCode);\n        const propValue = {\n          temperature,\n          state\n        };\n        setAllWeather(allWeather => ({ ...allWeather,\n          [propName]: propValue\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {\n    allWeather,\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"Zjm/TNEo0nrMGezFCAF38/DHJk0=\");\n\nexport default useCityList;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityList.jsx"],"names":["useState","useEffect","axios","convertUnits","validValues","getCityCode","useCityList","cities","allWeather","setAllWeather","error","setError","setWeather","city","countryCode","apiKey","url","response","get","data","temperature","Number","main","temp","from","to","toFixed","stateFromServer","weather","toLowerCase","state","includes","propName","propValue","request","forEach"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAC9C,YAAMC,MAAM,GAAG,kCAAf;AACA,YAAMC,GAAG,GAAI,oDAAmDH,IAAK,IAAGC,WAAY,UAASC,MAAO,EAApG;;AAEA,UAAI;AACF,cAAME,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAM;AAAEG,UAAAA;AAAF,YAAWF,QAAjB;AACA,cAAMG,WAAW,GAAGC,MAAM,CACxBlB,YAAY,CAACgB,IAAI,CAACG,IAAL,CAAUC,IAAX,CAAZ,CAA6BC,IAA7B,CAAkC,GAAlC,EAAuCC,EAAvC,CAA0C,GAA1C,EAA+CC,OAA/C,CAAuD,CAAvD,CADwB,CAA1B;AAGA,cAAMC,eAAe,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBN,IAAhB,CAAqBO,WAArB,EAAxB;AAEA,cAAMC,KAAK,GAAG1B,WAAW,CAAC2B,QAAZ,CAAqBJ,eAArB,IACVA,eADU,GAEV,IAFJ;AAGA,cAAMK,QAAQ,GAAG3B,WAAW,CAACQ,IAAD,EAAOC,WAAP,CAA5B;AACA,cAAMmB,SAAS,GAAG;AAAEb,UAAAA,WAAF;AAAeU,UAAAA;AAAf,SAAlB;AACArB,QAAAA,aAAa,CAAED,UAAD,KAAiB,EAC7B,GAAGA,UAD0B;AAE7B,WAACwB,QAAD,GAAYC;AAFiB,SAAjB,CAAD,CAAb;AAID,OAjBD,CAiBE,OAAOvB,KAAP,EAAc;AACd,YAAIA,KAAK,CAACO,QAAV,EAAoB;AAClBN,UAAAA,QAAQ,CAAC,sBAAD,CAAR;AACD,SAFD,MAEO,IAAID,KAAK,CAACwB,OAAV,EAAmB;AACxBvB,UAAAA,QAAQ,CAAC,wBAAD,CAAR;AACD,SAFM,MAEA;AACLA,UAAAA,QAAQ,CAAC,mBAAD,CAAR;AACD;AACF;AACF,KA9BD;;AA+BAJ,IAAAA,MAAM,CAAC4B,OAAP,CAAe,CAAC;AAAEtB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AACxCF,MAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AACD,KAFD;AAGD,GAnCQ,EAmCN,CAACP,MAAD,CAnCM,CAAT;AAoCA,SAAO;AAAEC,IAAAA,UAAF;AAAcE,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAP;AACD,CAxCD;;GAAML,W;;AA0CN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport { validValues } from \"../Components/IconState\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = (cities) => {\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const response = await axios.get(url);\n        const { data } = response;\n        const temperature = Number(\n          convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0)\n        );\n        const stateFromServer = data.weather[0].main.toLowerCase();\n\n        const state = validValues.includes(stateFromServer)\n          ? stateFromServer\n          : null;\n        const propName = getCityCode(city, countryCode);\n        const propValue = { temperature, state };\n        setAllWeather((allWeather) => ({\n          ...allWeather,\n          [propName]: propValue,\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n    cities.forEach(({ city, countryCode }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return { allWeather, error, setError };\n};\n\nexport default useCityList;\n"]},"metadata":{},"sourceType":"module"}