{"ast":null,"code":"import _slicedToArray from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useReducer,useContext}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var initialValue={allWeather:{},allChartData:{},allForecastItemList:{}};var WeatherStateContext=/*#__PURE__*/React.createContext();var WeatherDispatchContext=/*#__PURE__*/React.createContext();var reducer=function reducer(state,action){switch(action.type){case\"SET_ALL_WEATHER\":var weatherCity=action.payload;var newAllWeather=_objectSpread(_objectSpread({},state.allWeather),weatherCity);return _objectSpread(_objectSpread({},state),{},{allWeather:newAllWeather});case\"SET_CHART_DATA\":var chartDataCity=action.payload;var newAllChartData=_objectSpread(_objectSpread({},state.allChartData),chartDataCity);return _objectSpread(_objectSpread({},state),{},{allChartData:newAllChartData});case\"SET_FORECAST_ITEM_LIST\":var forecastItemListCity=action.payload;var newAllForecastItemListCity=_objectSpread(_objectSpread({},state.allForecastItemList),forecastItemListCity);return _objectSpread(_objectSpread({},state),{},{allForecastItemList:newAllForecastItemListCity});default:return state;}};var WeatherContext=function WeatherContext(_ref){var children=_ref.children;var _useReducer=useReducer(reducer,initialValue),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(WeatherDispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(WeatherStateContext.Provider,{value:state,children:children})});};var useWeatherDispatchContext=function useWeatherDispatchContext(){var dispatch=useContext(WeatherDispatchContext);if(!dispatch){throw Error('must set dispatch provider');}return dispatch;};var useWeatherStateContext=function useWeatherStateContext(){var state=useContext(WeatherStateContext);if(!state){throw Error('must set state provider');}return state;};export{WeatherContext,useWeatherDispatchContext,useWeatherStateContext};","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/WeatherContext.jsx"],"names":["React","useReducer","useContext","initialValue","allWeather","allChartData","allForecastItemList","WeatherStateContext","createContext","WeatherDispatchContext","reducer","state","action","type","weatherCity","payload","newAllWeather","chartDataCity","newAllChartData","forecastItemListCity","newAllForecastItemListCity","WeatherContext","children","dispatch","useWeatherDispatchContext","Error","useWeatherStateContext"],"mappings":"iQAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,UAA5B,KAA8C,OAA9C,C,2CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,UAAU,CAAE,EADO,CAEnBC,YAAY,CAAE,EAFK,CAGnBC,mBAAmB,CAAE,EAHF,CAArB,CAKA,GAAMC,CAAAA,mBAAmB,cAAGP,KAAK,CAACQ,aAAN,EAA5B,CACA,GAAMC,CAAAA,sBAAsB,cAAGT,KAAK,CAACQ,aAAN,EAA/B,CACA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACjC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,iBAAL,CACE,GAAMC,CAAAA,WAAW,CAAGF,MAAM,CAACG,OAA3B,CACA,GAAMC,CAAAA,aAAa,gCAAQL,KAAK,CAACP,UAAd,EAA6BU,WAA7B,CAAnB,CACA,sCAAYH,KAAZ,MAAmBP,UAAU,CAAEY,aAA/B,GACF,IAAK,gBAAL,CACE,GAAMC,CAAAA,aAAa,CAAGL,MAAM,CAACG,OAA7B,CACA,GAAMG,CAAAA,eAAe,gCAAQP,KAAK,CAACN,YAAd,EAA+BY,aAA/B,CAArB,CACA,sCAAYN,KAAZ,MAAmBN,YAAY,CAAEa,eAAjC,GACF,IAAK,wBAAL,CACE,GAAMC,CAAAA,oBAAoB,CAAGP,MAAM,CAACG,OAApC,CACA,GAAMK,CAAAA,0BAA0B,gCAC3BT,KAAK,CAACL,mBADqB,EAE3Ba,oBAF2B,CAAhC,CAIA,sCAAYR,KAAZ,MAAmBL,mBAAmB,CAAEc,0BAAxC,GACF,QACE,MAAOT,CAAAA,KAAP,CAjBJ,CAmBD,CApBD,CAsBA,GAAMU,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACvC,gBAA0BrB,UAAU,CAACS,OAAD,CAAUP,YAAV,CAApC,4CAAOQ,KAAP,iBAAcY,QAAd,iBACA,mBACE,KAAC,sBAAD,CAAwB,QAAxB,EAAiC,KAAK,CAAEA,QAAxC,uBACE,KAAC,mBAAD,CAAqB,QAArB,EAA8B,KAAK,CAAEZ,KAArC,UACGW,QADH,EADF,EADF,CAOD,CATD,CAUA,GAAME,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,EAAM,CACtC,GAAMD,CAAAA,QAAQ,CAAGrB,UAAU,CAACO,sBAAD,CAA3B,CACA,GAAG,CAACc,QAAJ,CAAa,CACT,KAAME,CAAAA,KAAK,CAAC,4BAAD,CAAX,CACH,CACD,MAAOF,CAAAA,QAAP,CACD,CAND,CAOA,GAAMG,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnC,GAAMf,CAAAA,KAAK,CAAGT,UAAU,CAACK,mBAAD,CAAxB,CACA,GAAG,CAACI,KAAJ,CAAU,CACR,KAAMc,CAAAA,KAAK,CAAC,yBAAD,CAAX,CACH,CACC,MAAOd,CAAAA,KAAP,CACD,CAND,CAOA,OAASU,cAAT,CAAyBG,yBAAzB,CAAoDE,sBAApD","sourcesContent":["import React, { useReducer, useContext } from \"react\";\n\nconst initialValue = {\n  allWeather: {},\n  allChartData: {},\n  allForecastItemList: {},\n};\nconst WeatherStateContext = React.createContext();\nconst WeatherDispatchContext = React.createContext();\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ALL_WEATHER\":\n      const weatherCity = action.payload;\n      const newAllWeather = { ...state.allWeather, ...weatherCity };\n      return { ...state, allWeather: newAllWeather };\n    case \"SET_CHART_DATA\":\n      const chartDataCity = action.payload;\n      const newAllChartData = { ...state.allChartData, ...chartDataCity };\n      return { ...state, allChartData: newAllChartData };\n    case \"SET_FORECAST_ITEM_LIST\":\n      const forecastItemListCity = action.payload;\n      const newAllForecastItemListCity = {\n        ...state.allForecastItemList,\n        ...forecastItemListCity,\n      };\n      return { ...state, allForecastItemList: newAllForecastItemListCity };\n    default:\n      return state;\n  }\n};\n\nconst WeatherContext = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  return (\n    <WeatherDispatchContext.Provider value={dispatch}>\n      <WeatherStateContext.Provider value={state}>\n        {children}\n      </WeatherStateContext.Provider>\n    </WeatherDispatchContext.Provider>\n  );\n};\nconst useWeatherDispatchContext = () => {\n  const dispatch = useContext(WeatherDispatchContext);\n  if(!dispatch){\n      throw Error('must set dispatch provider')\n  }\n  return dispatch;\n};\nconst useWeatherStateContext = () => {\n  const state = useContext(WeatherStateContext);\n  if(!state){\n    throw Error('must set state provider')\n}\n  return state;\n};\nexport { WeatherContext, useWeatherDispatchContext, useWeatherStateContext };\n"]},"metadata":{},"sourceType":"module"}