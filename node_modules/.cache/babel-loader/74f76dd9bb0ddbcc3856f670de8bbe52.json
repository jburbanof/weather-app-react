{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Pages/CityPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport Grid from \"@material-ui/core/Grid\";\nimport moment from \"moment\";\nimport { useParams } from \"react-router-dom\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataExample = [{\n  dayHour: \"Jue 18\",\n  min: 14,\n  max: 22\n}, {\n  dayHour: \"Vie 06\",\n  min: 18,\n  max: 27\n}, {\n  dayHour: \"Vie 12\",\n  min: 18,\n  max: 28\n}, {\n  dayHour: \"Vie 18\",\n  min: 18,\n  max: 25\n}, {\n  dayHour: \"Sab 06\",\n  min: 15,\n  max: 22\n}, {\n  dayHour: \"Sab 12\",\n  min: 12,\n  max: 19\n}];\nconst forecastItemListExample = [{\n  hour: 18,\n  state: \"clear\",\n  temperature: 17,\n  weekDay: \"Jueves\"\n}, {\n  hour: 6,\n  state: \"clouds\",\n  temperature: 18,\n  weekDay: \"Viernes\"\n}, {\n  hour: 12,\n  state: \"drizzle\",\n  temperature: 18,\n  weekDay: \"Viernes\"\n}, {\n  hour: 18,\n  state: \"clouds\",\n  temperature: 19,\n  weekDay: \"Viernes\"\n}, {\n  hour: 6,\n  state: \"rain\",\n  temperature: 17,\n  weekDay: \"Sábado\"\n}, {\n  hour: 12,\n  state: \"rain\",\n  temperature: 17,\n  weekDay: \"Sábado\"\n}];\n\nconst CityPage = () => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        console.log(\"data\", data);\n\n        const toCelsius = temp => convertUnits(temp).from('K').to('C');\n\n        const daysAhead = [0, 1, 2, 3, 4, 5];\n        const days = daysAhead.map(d => moment().add(d, 'd'));\n        const dataAux = days.map(day => {\n          const tempObjArray = data.list.filter(item => {\n            const dayOfYear = moment.unix(item.dt).dayOfYear();\n            return dayOfYear === day.dayOfYear();\n          });\n          console.log('dia', day.dayOfYear());\n          console.log(tempObjArray);\n          const temps = tempObjArray.map(item => item.main.temp);\n          return {\n            dayHour: day.format('dddd'),\n            min: Number(toCelsius(Math.min(...temps)).toFixed(0)),\n            max: Number(toCelsius(Math.max(...temps)).toFixed(0))\n          };\n        });\n        setData(dataAux);\n        debugger;\n        const interval = [4, 8, 12, 16, 20, 24];\n        const forecastItemListAux = data.list.filter((item, index) => interval.includes(index)).map(item => {\n          return {\n            hour: moment.unix(item.dt).hour(),\n            weekday: moment.unix(item.dt).format('dddd'),\n            state: item.weather[0].main.toLowerCase(),\n            temperature: toCelsius(item.main.temp)\n          };\n        });\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode]);\n  const country = \"Argentina\";\n  const state = \"clouds\";\n  const temperature = 20;\n  const humidity = 80;\n  const wind = 5; //const data = dataExample;\n  //const forecastItemList = forecastItemListExample;\n\n  return /*#__PURE__*/_jsxDEV(AppFrame, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-around\",\n      direction: \"column\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        justifyContent: \"center\",\n        alignItems: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Weather, {\n          state: state,\n          temperature: temperature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherDetails, {\n          humidity: humidity,\n          wind: wind\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: data && /*#__PURE__*/_jsxDEV(ForecastChart, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: forecastItemList && /*#__PURE__*/_jsxDEV(Forecast, {\n          forecastItemList: forecastItemList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityPage, \"1u1R1OCJITgXqY+JkQ0x8vAnE0c=\", false, function () {\n  return [useParams];\n});\n\n_c = CityPage;\nexport default CityPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityPage\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Pages/CityPage.jsx"],"names":["React","useState","useEffect","axios","convertUnits","Grid","moment","useParams","CityInfo","Weather","WeatherDetails","ForecastChart","Forecast","AppFrame","dataExample","dayHour","min","max","forecastItemListExample","hour","state","temperature","weekDay","CityPage","data","setData","forecastItemList","setForecastItemList","city","countryCode","getForecast","apiKey","url","get","console","log","toCelsius","temp","from","to","daysAhead","days","map","d","add","dataAux","day","tempObjArray","list","filter","item","dayOfYear","unix","dt","temps","main","format","Number","Math","toFixed","interval","forecastItemListAux","index","includes","weekday","weather","toLowerCase","error","country","humidity","wind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\"\nimport Grid from \"@material-ui/core/Grid\";\nimport moment from \"moment\";\nimport { useParams } from \"react-router-dom\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\n\nconst dataExample = [\n  {\n    dayHour: \"Jue 18\",\n    min: 14,\n    max: 22,\n  },\n  {\n    dayHour: \"Vie 06\",\n    min: 18,\n    max: 27,\n  },\n  {\n    dayHour: \"Vie 12\",\n    min: 18,\n    max: 28,\n  },\n  {\n    dayHour: \"Vie 18\",\n    min: 18,\n    max: 25,\n  },\n  {\n    dayHour: \"Sab 06\",\n    min: 15,\n    max: 22,\n  },\n  {\n    dayHour: \"Sab 12\",\n    min: 12,\n    max: 19,\n  },\n];\n\nconst forecastItemListExample = [\n  { hour: 18, state: \"clear\", temperature: 17, weekDay: \"Jueves\" },\n  { hour: 6, state: \"clouds\", temperature: 18, weekDay: \"Viernes\" },\n  { hour: 12, state: \"drizzle\", temperature: 18, weekDay: \"Viernes\" },\n  { hour: 18, state: \"clouds\", temperature: 19, weekDay: \"Viernes\" },\n  { hour: 6, state: \"rain\", temperature: 17, weekDay: \"Sábado\" },\n  { hour: 12, state: \"rain\", temperature: 17, weekDay: \"Sábado\" },\n];\n\nconst CityPage = () => {\n  const [data, setData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const { city, countryCode } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${apiKey}`;\n      \n      try {\n        const { data } = await axios.get(url);\n        console.log(\"data\",data);\n        const toCelsius = (temp) => convertUnits(temp).from('K').to('C')\n        const daysAhead = [ 0, 1, 2, 3, 4, 5 ]\n        const days = daysAhead.map(d => moment().add(d, 'd'))\n        const dataAux = days.map(day => {\n            \n            const tempObjArray = data.list.filter(item => {\n              const dayOfYear = moment.unix(item.dt).dayOfYear()\n              return dayOfYear === day.dayOfYear()\n            })\n            console.log('dia',day.dayOfYear())\n            console.log(tempObjArray)\n            const temps = tempObjArray.map(item => item.main.temp)\n            \n\n            return ({\n              dayHour: day.format('dddd'),\n              min: Number(toCelsius(Math.min(...temps)).toFixed(0)),\n              max: Number(toCelsius(Math.max(...temps)).toFixed(0))\n            })\n        })\n\n        setData(dataAux);\n        debugger\n        const interval = [4, 8, 12, 16, 20, 24]\n\n        const forecastItemListAux = data.list.filter((item, index) => interval.includes(index)).map(item => {\n          return ({\n            hour: moment.unix(item.dt).hour(),\n            weekday: moment.unix(item.dt).format('dddd'),\n            state: item.weather[0].main.toLowerCase(),\n            temperature: toCelsius(item.main.temp)\n          })\n        })\n\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    getForecast()\n  }, [city, countryCode]);\n\n  const country = \"Argentina\";\n  const state = \"clouds\";\n  const temperature = 20;\n  const humidity = 80;\n  const wind = 5;\n  //const data = dataExample;\n  //const forecastItemList = forecastItemListExample;\n\n  return (\n    <AppFrame>\n      <Grid\n        container\n        justifyContent=\"space-around\"\n        direction=\"column\"\n        spacing={2}\n      >\n        <Grid\n          item\n          container\n          xs={12}\n          justifyContent=\"center\"\n          alignItems=\"flex-end\"\n        >\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item xs={12}>\n          <Weather state={state} temperature={temperature} />\n          <WeatherDetails humidity={humidity} wind={wind} />\n        </Grid>\n        <Grid item>{data && <ForecastChart data={data} />}</Grid>\n        <Grid item>\n          {forecastItemList && <Forecast forecastItemList={forecastItemList} />}\n        </Grid>\n      </Grid>\n    </AppFrame>\n  );\n};\n\nexport default CityPage;\n"]},"metadata":{},"sourceType":"module"}