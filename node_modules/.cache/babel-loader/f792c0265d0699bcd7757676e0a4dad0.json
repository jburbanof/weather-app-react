{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport { useWeatherStateContext, useWeatherDispatchContext } from \"../../WeatherContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityListItem = /*#__PURE__*/React.memo(_c = ({\n  city,\n  countryCode,\n  country,\n  weather,\n  eventOnClickCity\n}) => {\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this);\n});\n_c2 = CityListItem;\n\nconst renderCityAndCountry = eventOnClickCity => (cityCountry, weather) => {\n  const {\n    city,\n    countryCode\n  } = cityCountry;\n  return /*#__PURE__*/_jsxDEV(CityListItem, {\n    eventOnClickCity: eventOnClickCity,\n    weather: weather,\n    ...cityCountry\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity\n}) => {\n  _s();\n\n  const actions = useWeatherDispatchContext();\n  const data = useWeatherStateContext();\n  console.log(cities);\n  const {\n    allWeather\n  } = data;\n  const {\n    error,\n    setError\n  } = useCityList(cities, allWeather, actions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityList, \"10pUlwFwQD/Yct0CG7wVQnLegTY=\", false, function () {\n  return [useWeatherDispatchContext, useWeatherStateContext, useCityList];\n});\n\n_c3 = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default _c4 = /*#__PURE__*/React.memo(CityList);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CityListItem$React.memo\");\n$RefreshReg$(_c2, \"CityListItem\");\n$RefreshReg$(_c3, \"CityList\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx"],"names":["React","PropTypes","Grid","List","ListItem","Alert","useCityList","CityInfo","Weather","getCityCode","useWeatherStateContext","useWeatherDispatchContext","CityListItem","memo","city","countryCode","country","weather","eventOnClickCity","temperature","state","renderCityAndCountry","cityCountry","CityList","cities","onClickCity","actions","data","console","log","allWeather","error","setError","map","cityAndCountry","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport { useWeatherStateContext, useWeatherDispatchContext } from \"../../WeatherContext\";\n\nconst CityListItem = React.memo(\n  ({ city, countryCode, country, weather, eventOnClickCity }) => {\n    return (\n      <ListItem button onClick={() => eventOnClickCity(city, countryCode)}>\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\n          <Grid item md={9} xs={12}>\n            <CityInfo city={city} country={country} />\n          </Grid>\n          <Grid item md={3} xs={12}>\n            <Weather\n              temperature={weather && weather.temperature}\n              state={weather && weather.state}\n            />\n          </Grid>\n        </Grid>\n      </ListItem>\n    );\n  }\n);\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, countryCode } = cityCountry;\n  return (\n    <CityListItem\n      key={getCityCode(city, countryCode)}\n      eventOnClickCity={eventOnClickCity}\n      weather={weather}\n      {...cityCountry}\n    />\n  );\n};\n\nconst CityList = ({ cities, onClickCity }) => {\n  const actions = useWeatherDispatchContext();\n  const data = useWeatherStateContext();\n  console.log(cities)\n  const { allWeather } = data;\n  const { error, setError } = useCityList(cities, allWeather, actions);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CityList);\n"]},"metadata":{},"sourceType":"module"}