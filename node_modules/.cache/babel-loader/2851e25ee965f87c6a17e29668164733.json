{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/gitReps/weather-app-react/src/WeatherContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useReducer, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  allWeather: {},\n  allChartData: {},\n  allForecastItemList: {}\n};\nconst WeatherStateContext = /*#__PURE__*/React.createContext();\nconst WeatherDispatchContext = /*#__PURE__*/React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ALL_WEATHER\":\n      const weatherCity = action.payload;\n      const newAllWeather = { ...state.allWeather,\n        ...weatherCity\n      };\n      return { ...state,\n        allWeather: newAllWeather\n      };\n\n    case \"SET_CHART_DATA\":\n      const chartDataCity = action.payload;\n      const newAllChartData = { ...state.allChartData,\n        ...chartDataCity\n      };\n      return { ...state,\n        allChartData: newAllChartData\n      };\n\n    case \"SET_FORECAST_ITEM_LIST\":\n      const forecastItemListCity = action.payload;\n      const newAllForecastItemListCity = { ...state.allForecastItemList,\n        ...forecastItemListCity\n      };\n      return { ...state,\n        allForecastItemList: newAllForecastItemListCity\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst WeatherContext = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  return /*#__PURE__*/_jsxDEV(WeatherDispatchContext.Provider, {\n    value: dispatch,\n    children: /*#__PURE__*/_jsxDEV(WeatherStateContext.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherContext, \"4lkJSiYZPtg3yU6cDCuaqNx534E=\");\n\n_c = WeatherContext;\n\nconst useWeatherDispatchContext = () => {\n  _s2();\n\n  const dispatch = useContext(WeatherDispatchContext);\n\n  if (!dispatch) {\n    throw Error('must set dispatch provider');\n  }\n\n  return dispatch;\n};\n\n_s2(useWeatherDispatchContext, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nconst useWeatherStateContext = () => {\n  _s3();\n\n  const state = useContext(WeatherStateContext);\n\n  if (!state) {\n    throw Error('must set state provider');\n  }\n\n  return state;\n};\n\n_s3(useWeatherStateContext, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport { WeatherContext, useWeatherDispatchContext, useWeatherStateContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherContext\");","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/WeatherContext.jsx"],"names":["React","useReducer","useContext","initialValue","allWeather","allChartData","allForecastItemList","WeatherStateContext","createContext","WeatherDispatchContext","reducer","state","action","type","weatherCity","payload","newAllWeather","chartDataCity","newAllChartData","forecastItemListCity","newAllForecastItemListCity","WeatherContext","children","dispatch","useWeatherDispatchContext","Error","useWeatherStateContext"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,mBAAmB,EAAE;AAHF,CAArB;AAKA,MAAMC,mBAAmB,gBAAGP,KAAK,CAACQ,aAAN,EAA5B;AACA,MAAMC,sBAAsB,gBAAGT,KAAK,CAACQ,aAAN,EAA/B;;AACA,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,YAAMC,WAAW,GAAGF,MAAM,CAACG,OAA3B;AACA,YAAMC,aAAa,GAAG,EAAE,GAAGL,KAAK,CAACP,UAAX;AAAuB,WAAGU;AAA1B,OAAtB;AACA,aAAO,EAAE,GAAGH,KAAL;AAAYP,QAAAA,UAAU,EAAEY;AAAxB,OAAP;;AACF,SAAK,gBAAL;AACE,YAAMC,aAAa,GAAGL,MAAM,CAACG,OAA7B;AACA,YAAMG,eAAe,GAAG,EAAE,GAAGP,KAAK,CAACN,YAAX;AAAyB,WAAGY;AAA5B,OAAxB;AACA,aAAO,EAAE,GAAGN,KAAL;AAAYN,QAAAA,YAAY,EAAEa;AAA1B,OAAP;;AACF,SAAK,wBAAL;AACE,YAAMC,oBAAoB,GAAGP,MAAM,CAACG,OAApC;AACA,YAAMK,0BAA0B,GAAG,EACjC,GAAGT,KAAK,CAACL,mBADwB;AAEjC,WAAGa;AAF8B,OAAnC;AAIA,aAAO,EAAE,GAAGR,KAAL;AAAYL,QAAAA,mBAAmB,EAAEc;AAAjC,OAAP;;AACF;AACE,aAAOT,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,MAAMU,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvC,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBtB,UAAU,CAACS,OAAD,EAAUP,YAAV,CAApC;AACA,sBACE,QAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAEoB,QAAxC;AAAA,2BACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAEZ,KAArC;AAAA,gBACGW;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CATD;;GAAMD,c;;KAAAA,c;;AAUN,MAAMG,yBAAyB,GAAG,MAAM;AAAA;;AACtC,QAAMD,QAAQ,GAAGrB,UAAU,CAACO,sBAAD,CAA3B;;AACA,MAAG,CAACc,QAAJ,EAAa;AACT,UAAME,KAAK,CAAC,4BAAD,CAAX;AACH;;AACD,SAAOF,QAAP;AACD,CAND;;IAAMC,yB;;AAON,MAAME,sBAAsB,GAAG,MAAM;AAAA;;AACnC,QAAMf,KAAK,GAAGT,UAAU,CAACK,mBAAD,CAAxB;;AACA,MAAG,CAACI,KAAJ,EAAU;AACR,UAAMc,KAAK,CAAC,yBAAD,CAAX;AACH;;AACC,SAAOd,KAAP;AACD,CAND;;IAAMe,sB;;AAON,SAASL,cAAT,EAAyBG,yBAAzB,EAAoDE,sBAApD","sourcesContent":["import React, { useReducer, useContext } from \"react\";\n\nconst initialValue = {\n  allWeather: {},\n  allChartData: {},\n  allForecastItemList: {},\n};\nconst WeatherStateContext = React.createContext();\nconst WeatherDispatchContext = React.createContext();\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ALL_WEATHER\":\n      const weatherCity = action.payload;\n      const newAllWeather = { ...state.allWeather, ...weatherCity };\n      return { ...state, allWeather: newAllWeather };\n    case \"SET_CHART_DATA\":\n      const chartDataCity = action.payload;\n      const newAllChartData = { ...state.allChartData, ...chartDataCity };\n      return { ...state, allChartData: newAllChartData };\n    case \"SET_FORECAST_ITEM_LIST\":\n      const forecastItemListCity = action.payload;\n      const newAllForecastItemListCity = {\n        ...state.allForecastItemList,\n        ...forecastItemListCity,\n      };\n      return { ...state, allForecastItemList: newAllForecastItemListCity };\n    default:\n      return state;\n  }\n};\n\nconst WeatherContext = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  return (\n    <WeatherDispatchContext.Provider value={dispatch}>\n      <WeatherStateContext.Provider value={state}>\n        {children}\n      </WeatherStateContext.Provider>\n    </WeatherDispatchContext.Provider>\n  );\n};\nconst useWeatherDispatchContext = () => {\n  const dispatch = useContext(WeatherDispatchContext);\n  if(!dispatch){\n      throw Error('must set dispatch provider')\n  }\n  return dispatch;\n};\nconst useWeatherStateContext = () => {\n  const state = useContext(WeatherStateContext);\n  if(!state){\n    throw Error('must set state provider')\n}\n  return state;\n};\nexport { WeatherContext, useWeatherDispatchContext, useWeatherStateContext };\n"]},"metadata":{},"sourceType":"module"}