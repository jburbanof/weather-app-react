{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityListItem = /*#__PURE__*/React.memo(_c = ({\n  city,\n  countryCode,\n  country,\n  weather,\n  eventOnClickCity\n}) => {\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n});\n_c2 = CityListItem;\n\nconst renderCityAndCountry = eventOnClickCity => (cityCountry, weather) => {\n  const {\n    city,\n    countryCode\n  } = cityCountry;\n  return /*#__PURE__*/_jsxDEV(CityListItem, {\n    eventOnClickCity: eventOnClickCity,\n    weather: weather,\n    ...cityCountry\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity,\n  actions,\n  data\n}) => {\n  _s();\n\n  //const { onSetAllWeather } = actions;\n  const {\n    allWeather\n  } = data;\n  const {\n    error,\n    setError\n  } = useCityList(cities, allWeather, actions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityList, \"yILzZCRIsW+HXUwNG6oQDrWcxik=\", false, function () {\n  return [useCityList];\n});\n\n_c3 = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default _c4 = /*#__PURE__*/React.memo(CityList);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CityListItem$React.memo\");\n$RefreshReg$(_c2, \"CityListItem\");\n$RefreshReg$(_c3, \"CityList\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx"],"names":["React","PropTypes","Grid","List","ListItem","Alert","useCityList","CityInfo","Weather","getCityCode","CityListItem","memo","city","countryCode","country","weather","eventOnClickCity","temperature","state","renderCityAndCountry","cityCountry","CityList","cities","onClickCity","actions","data","allWeather","error","setError","map","cityAndCountry","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,WAAT,QAA4B,2BAA5B;;AAEA,MAAMC,YAAY,gBAAGV,KAAK,CAACW,IAAN,MAAW,CAAC;AAC/BC,EAAAA,IAD+B;AAE/BC,EAAAA,WAF+B;AAG/BC,EAAAA,OAH+B;AAI/BC,EAAAA,OAJ+B;AAK/BC,EAAAA;AAL+B,CAAD,KAM1B;AACJ,sBACE,QAAC,QAAD;AAAU,IAAA,MAAM,MAAhB;AAAiB,IAAA,OAAO,EAAE,MAAMA,gBAAgB,CAACJ,IAAD,EAAOC,WAAP,CAAhD;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,cAAc,EAAC,QAA/B;AAAwC,MAAA,UAAU,EAAC,QAAnD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,EAAtB;AAAA,+BACE,QAAC,QAAD;AAAU,UAAA,IAAI,EAAED,IAAhB;AAAsB,UAAA,OAAO,EAAEE;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,EAAtB;AAAA,+BACE,QAAC,OAAD;AACE,UAAA,WAAW,EAAEC,OAAO,IAAIA,OAAO,CAACE,WADlC;AAEE,UAAA,KAAK,EAAEF,OAAO,IAAIA,OAAO,CAACG;AAF5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAtBoB,CAArB;MAAMR,Y;;AAwBN,MAAMS,oBAAoB,GAAIH,gBAAD,IAAsB,CAACI,WAAD,EAAcL,OAAd,KAA0B;AAC3E,QAAM;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBO,WAA9B;AACA,sBACE,QAAC,YAAD;AAEE,IAAA,gBAAgB,EAAEJ,gBAFpB;AAGE,IAAA,OAAO,EAAED,OAHX;AAAA,OAIMK;AAJN,KACOX,WAAW,CAACG,IAAD,EAAOC,WAAP,CADlB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAVD;;AAYA,MAAMQ,QAAQ,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBC,EAAAA,OAAvB;AAAgCC,EAAAA;AAAhC,CAAD,KAA4C;AAAA;;AAC3D;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,IAAvB;AACA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBtB,WAAW,CAACgB,MAAD,EAASI,UAAT,EAAqBF,OAArB,CAAvC;AAEA,sBACE;AAAA,eACGG,KAAK,iBACJ,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAAC,IAAD,CAA9B;AAAsC,MAAA,QAAQ,EAAC,OAA/C;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,eAME,QAAC,IAAD;AAAA,gBACGL,MAAM,CAACO,GAAP,CAAYC,cAAD,IACVX,oBAAoB,CAACI,WAAD,CAApB,CACEO,cADF,EAEEJ,UAAU,CACRjB,WAAW,CAACqB,cAAc,CAAClB,IAAhB,EAAsBkB,cAAc,CAACjB,WAArC,CADH,CAFZ,CADD;AADH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAxBD;;GAAMQ,Q;UAGwBf,W;;;MAHxBe,Q;AAyBNA,QAAQ,CAACU,SAAT,GAAqB;AACnBT,EAAAA,MAAM,EAAErB,SAAS,CAAC+B,OAAV,CACN/B,SAAS,CAACgC,KAAV,CAAgB;AACdrB,IAAAA,IAAI,EAAEX,SAAS,CAACiC,MAAV,CAAiBC,UADT;AAEdrB,IAAAA,OAAO,EAAEb,SAAS,CAACiC,MAAV,CAAiBC,UAFZ;AAGdtB,IAAAA,WAAW,EAAEZ,SAAS,CAACiC,MAAV,CAAiBC;AAHhB,GAAhB,CADM,EAMNA,UAPiB;AAQnBZ,EAAAA,WAAW,EAAEtB,SAAS,CAACmC,IAAV,CAAeD;AART,CAArB;AAWA,kCAAenC,KAAK,CAACW,IAAN,CAAWU,QAAX,CAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\n\nconst CityListItem = React.memo(({\n  city,\n  countryCode,\n  country,\n  weather,\n  eventOnClickCity,\n}) => {\n  return (\n    <ListItem button onClick={() => eventOnClickCity(city, countryCode)}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <Grid item md={9} xs={12}>\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item md={3} xs={12}>\n          <Weather\n            temperature={weather && weather.temperature}\n            state={weather && weather.state}\n          />\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n});\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, countryCode } = cityCountry;\n  return (\n    <CityListItem\n      key={getCityCode(city, countryCode)}\n      eventOnClickCity={eventOnClickCity}\n      weather={weather}\n      {...cityCountry}\n    />\n  );\n};\n\nconst CityList = ({ cities, onClickCity, actions, data }) => {\n  //const { onSetAllWeather } = actions;\n  const { allWeather } = data;\n  const { error, setError } = useCityList(cities, allWeather, actions);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CityList);\n"]},"metadata":{},"sourceType":"module"}