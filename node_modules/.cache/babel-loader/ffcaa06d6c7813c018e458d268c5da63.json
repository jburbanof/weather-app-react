{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/ForecastChart/ForecastChart.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { LineChart } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForecastChart = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(LineChart, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ForecastChart;\nForecastChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    dayHour: PropTypes.string.isRequired,\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired\n  })).isRequired\n};\nForecastChart.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ForecastChart\",\n  \"props\": {\n    \"data\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"dayHour\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"min\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"max\": {\n              \"name\": \"number\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default ForecastChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastChart\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/Components/ForecastChart/ForecastChart.jsx\"] = {\n    name: \"ForecastChart\",\n    docgenInfo: ForecastChart.__docgenInfo,\n    path: \"src/Components/ForecastChart/ForecastChart.jsx\"\n  };\n}","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/ForecastChart/ForecastChart.jsx"],"names":["React","PropTypes","LineChart","ForecastChart","data","propTypes","arrayOf","shape","dayHour","string","isRequired","min","number","max"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,UAA1B;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC9B,sBACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAJD;;KAAMD,a;AAMNA,aAAa,CAACE,SAAd,GAA0B;AACtBD,EAAAA,IAAI,EAAEH,SAAS,CAACK,OAAV,CACFL,SAAS,CAACM,KAAV,CAAgB;AACZC,IAAAA,OAAO,EAAEP,SAAS,CAACQ,MAAV,CAAiBC,UADd;AAEZC,IAAAA,GAAG,EAAEV,SAAS,CAACW,MAAV,CAAiBF,UAFV;AAGZG,IAAAA,GAAG,EAAEZ,SAAS,CAACW,MAAV,CAAiBF;AAHV,GAAhB,CADE,EAMJA;AAPoB,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,eAAeP,aAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { LineChart } from 'recharts'\n\nconst ForecastChart = ({data}) => {\n    return (\n        <LineChart></LineChart>\n    )\n}\n\nForecastChart.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            dayHour: PropTypes.string.isRequired,\n            min: PropTypes.number.isRequired,\n            max: PropTypes.number.isRequired\n        })\n    ).isRequired\n}\n\nexport default ForecastChart\n"]},"metadata":{},"sourceType":"module"}