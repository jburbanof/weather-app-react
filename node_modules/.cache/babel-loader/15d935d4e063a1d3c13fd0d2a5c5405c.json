{"ast":null,"code":"import _defineProperty from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{toCelsius,getCityCode}from\"../utilities\";import{validValues}from\"../../Components/IconState\";var getAllWeather=function getAllWeather(response,city,countryCode){var data=response.data;var temperature=toCelsius(data.main.temp);var humidity=data.main.humidity;var wind=data.wind.speed;var stateFromServer=data.weather[0].main.toLowerCase();var state=validValues.includes(stateFromServer)?stateFromServer:null;var propName=getCityCode(city,countryCode);var propValue={temperature:temperature,state:state,humidity:humidity,wind:wind};return _defineProperty({},propName,propValue);};export default getAllWeather;","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/Utilities/transform/getAllWeather.jsx"],"names":["toCelsius","getCityCode","validValues","getAllWeather","response","city","countryCode","data","temperature","main","temp","humidity","wind","speed","stateFromServer","weather","toLowerCase","state","includes","propName","propValue"],"mappings":"mIAAA,OAASA,SAAT,CAAoBC,WAApB,KAAuC,cAAvC,CACA,OAASC,WAAT,KAA4B,4BAA5B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,QAAD,CAAWC,IAAX,CAAiBC,WAAjB,CAAiC,CACrD,GAAQC,CAAAA,IAAR,CAAiBH,QAAjB,CAAQG,IAAR,CACA,GAAMC,CAAAA,WAAW,CAAGR,SAAS,CAACO,IAAI,CAACE,IAAL,CAAUC,IAAX,CAA7B,CACA,GAAMC,CAAAA,QAAQ,CAAGJ,IAAI,CAACE,IAAL,CAAUE,QAA3B,CACA,GAAMC,CAAAA,IAAI,CAAGL,IAAI,CAACK,IAAL,CAAUC,KAAvB,CACA,GAAMC,CAAAA,eAAe,CAAGP,IAAI,CAACQ,OAAL,CAAa,CAAb,EAAgBN,IAAhB,CAAqBO,WAArB,EAAxB,CACA,GAAMC,CAAAA,KAAK,CAAGf,WAAW,CAACgB,QAAZ,CAAqBJ,eAArB,EAAwCA,eAAxC,CAA0D,IAAxE,CAEA,GAAMK,CAAAA,QAAQ,CAAGlB,WAAW,CAACI,IAAD,CAAOC,WAAP,CAA5B,CACA,GAAMc,CAAAA,SAAS,CAAG,CAAEZ,WAAW,CAAXA,WAAF,CAAeS,KAAK,CAALA,KAAf,CAAsBN,QAAQ,CAARA,QAAtB,CAAgCC,IAAI,CAAJA,IAAhC,CAAlB,CACA,0BACGO,QADH,CACcC,SADd,EAGD,CAbD,CAeA,cAAejB,CAAAA,aAAf","sourcesContent":["import { toCelsius, getCityCode } from \"../utilities\";\nimport { validValues } from \"../../Components/IconState\";\n\nconst getAllWeather = (response, city, countryCode) => {\n  const { data } = response;\n  const temperature = toCelsius(data.main.temp);\n  const humidity = data.main.humidity;\n  const wind = data.wind.speed;\n  const stateFromServer = data.weather[0].main.toLowerCase();\n  const state = validValues.includes(stateFromServer) ? stateFromServer : null;\n\n  const propName = getCityCode(city, countryCode);\n  const propValue = { temperature, state, humidity, wind };\n  return {\n    [propName]: propValue,\n  };\n};\n\nexport default getAllWeather;\n"]},"metadata":{},"sourceType":"module"}