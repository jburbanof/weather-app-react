{"ast":null,"code":"import React,{useMemo}from\"react\";import Grid from\"@material-ui/core/Grid\";import LinearProgress from\"@material-ui/core/LinearProgress\";import CityInfo from\"../Components/CityInfo\";import Weather from\"../Components/Weather\";import WeatherDetails from\"../Components/WeatherDetails\";import ForecastChart from\"../Components/ForecastChart\";import Forecast from\"../Components/Forecast\";import AppFrame from\"../Components/AppFrame\";import useCityPage from\"../Hooks/useCityPage\";import useCityList from\"../Hooks/useCityList\";import{getCityCode}from\"../Utilities/utilities\";import{useWeatherDispatchContext,useWeatherStateContext}from\"../WeatherContext\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CityPage=function CityPage(){var data=useWeatherStateContext();var actions=useWeatherDispatchContext();var allWeather=data.allWeather,allChartData=data.allChartData,allForecastItemList=data.allForecastItemList;var _useCityPage=useCityPage(actions,allChartData,allForecastItemList),city=_useCityPage.city,countryCode=_useCityPage.countryCode;var cities=useMemo(function(){return[{city:city,countryCode:countryCode}];},[city,countryCode]);useCityList(cities,allWeather,actions);var cityCode=getCityCode(city,countryCode);var weather=allWeather[cityCode];var chartData=allChartData[cityCode];var forecastItemList=allForecastItemList[cityCode];var state=weather&&weather.state;var temperature=weather&&weather.temperature;var humidity=weather&&weather.humidity;var wind=weather&&weather.wind;return/*#__PURE__*/_jsx(AppFrame,{children:/*#__PURE__*/_jsxs(Grid,{container:true,justifyContent:\"space-around\",direction:\"column\",spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,container:true,xs:12,justifyContent:\"center\",alignItems:\"flex-end\",children:/*#__PURE__*/_jsx(CityInfo,{city:city,countryCode:countryCode})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(Weather,{state:state,temperature:temperature}),humidity&&wind&&/*#__PURE__*/_jsx(WeatherDetails,{humidity:humidity,wind:wind})]}),/*#__PURE__*/_jsx(Grid,{children:!chartData&&!forecastItemList&&/*#__PURE__*/_jsx(LinearProgress,{})}),/*#__PURE__*/_jsx(Grid,{item:true,children:chartData&&/*#__PURE__*/_jsx(ForecastChart,{data:chartData})}),/*#__PURE__*/_jsx(Grid,{item:true,children:forecastItemList&&/*#__PURE__*/_jsx(Forecast,{forecastItemList:forecastItemList})})]})});};export default CityPage;","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/Pages/CityPage.jsx"],"names":["React","useMemo","Grid","LinearProgress","CityInfo","Weather","WeatherDetails","ForecastChart","Forecast","AppFrame","useCityPage","useCityList","getCityCode","useWeatherDispatchContext","useWeatherStateContext","CityPage","data","actions","allWeather","allChartData","allForecastItemList","city","countryCode","cities","cityCode","weather","chartData","forecastItemList","state","temperature","humidity","wind"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CityInfo from \"../Components/CityInfo\";\nimport Weather from \"../Components/Weather\";\nimport WeatherDetails from \"../Components/WeatherDetails\";\nimport ForecastChart from \"../Components/ForecastChart\";\nimport Forecast from \"../Components/Forecast\";\nimport AppFrame from \"../Components/AppFrame\";\nimport useCityPage from \"../Hooks/useCityPage\";\nimport useCityList from \"../Hooks/useCityList\";\nimport { getCityCode } from \"../Utilities/utilities\";\nimport {\n  useWeatherDispatchContext,\n  useWeatherStateContext,\n} from \"../WeatherContext\";\nconst CityPage = () => {\n  \n  const data = useWeatherStateContext();\n  const actions = useWeatherDispatchContext();\n  const { allWeather, allChartData, allForecastItemList } = data;\n  const { city, countryCode } = useCityPage(\n    actions,\n    allChartData,\n    allForecastItemList\n  );\n  const cities = useMemo(() => [{ city, countryCode }], [city, countryCode]);\n  useCityList(cities, allWeather, actions);\n  const cityCode = getCityCode(city, countryCode);\n  const weather = allWeather[cityCode];\n  const chartData = allChartData[cityCode];\n  const forecastItemList = allForecastItemList[cityCode];\n  const state = weather && weather.state;\n  const temperature = weather && weather.temperature;\n  const humidity = weather && weather.humidity;\n  const wind = weather && weather.wind;\n\n  return (\n    <AppFrame>\n      <Grid\n        container\n        justifyContent=\"space-around\"\n        direction=\"column\"\n        spacing={2}\n      >\n        <Grid\n          item\n          container\n          xs={12}\n          justifyContent=\"center\"\n          alignItems=\"flex-end\"\n        >\n          <CityInfo city={city} countryCode={countryCode} />\n        </Grid>\n        <Grid item xs={12}>\n          <Weather state={state} temperature={temperature} />\n          {humidity && wind && (\n            <WeatherDetails humidity={humidity} wind={wind} />\n          )}\n        </Grid>\n        <Grid>{!chartData && !forecastItemList && <LinearProgress />}</Grid>\n        <Grid item>{chartData && <ForecastChart data={chartData} />}</Grid>\n        <Grid item>\n          {forecastItemList && <Forecast forecastItemList={forecastItemList} />}\n        </Grid>\n      </Grid>\n    </AppFrame>\n  );\n};\n\nexport default CityPage;\n"]},"metadata":{},"sourceType":"module"}