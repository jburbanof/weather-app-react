{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityCountry, weather) => {\n  const {\n    city,\n    country\n  } = cityCountry;\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: eventOnClickCity,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        xs: 12,\n        children: weather ? /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather.temperature,\n          state: weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this) : \"No Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, city, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity\n}) => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  useEffect(() => {\n    const setWeather = (city, country) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n      axios.get(url).then(response => {\n        const {\n          data\n        } = response;\n        const temperature = data.main.temp;\n        const state = \"fog\";\n        const propName = `${city}-${country}`;\n        const propValue = {\n          temperature,\n          state\n        };\n        setAllWeather(allWeather => ({ ...allWeather,\n          [propName]: propValue\n        }));\n      });\n    };\n\n    cities.forEach(({\n      city,\n      country\n    }) => {\n      setWeather(city, country);\n    });\n  }, [cities]);\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityList, \"TPrlf75VKUWv3yN+JnaOgAVx92s=\");\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nCityList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"CityList\",\n  \"props\": {\n    \"cities\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"city\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"country\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onClickCity\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/Components/CityList/CityList.jsx\"] = {\n    name: \"CityList\",\n    docgenInfo: CityList.__docgenInfo,\n    path: \"src/Components/CityList/CityList.jsx\"\n  };\n}","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx"],"names":["React","useState","useEffect","PropTypes","axios","Grid","List","ListItem","CityInfo","Weather","renderCityAndCountry","eventOnClickCity","cityCountry","weather","city","country","temperature","state","CityList","cities","onClickCity","allWeather","setAllWeather","setWeather","apiKey","url","get","then","response","data","main","temp","propName","propValue","forEach","map","cityAndCountry","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, country } = cityCountry;\n  return (\n    <ListItem button key={city} onClick={eventOnClickCity}>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid item md={9} xs={12}>\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item md={3} xs={12}>\n          {weather ? (\n            <Weather temperature={weather.temperature} state={weather.state} />\n          ) : (\n            \"No Data\"\n          )}\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n};\n\nconst CityList = ({ cities, onClickCity }) => {\n  const [allWeather, setAllWeather] = useState({});\n  useEffect(() => {\n    const setWeather = (city, country) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n      axios.get(url).then((response) => {\n        const { data } = response;\n        const temperature = data.main.temp;\n        const state = \"fog\";\n        const propName = `${city}-${country}`;\n        const propValue = { temperature, state };\n        setAllWeather(allWeather => ({ ...allWeather, [propName]: propValue }))\n      });\n    };\n    cities.forEach(({ city, country }) => {\n      setWeather(city, country);\n    });\n  }, [cities]);\n\n  return (\n    <List>\n      {cities.map((cityAndCountry) =>\n        renderCityAndCountry(onClickCity)(\n          cityAndCountry,\n          allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]\n        )\n      )}\n    </List>\n  );\n};\n\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default CityList;\n"]},"metadata":{},"sourceType":"module"}