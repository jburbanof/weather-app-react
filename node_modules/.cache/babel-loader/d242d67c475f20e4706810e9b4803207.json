{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\n  const {\n    city,\n    countryCode,\n    country\n  } = cityAndCountry; // const { temperature, state } = weather\n\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this)\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity,\n  onSetAllWeather,\n  allWeather\n}) => {\n  _s();\n\n  const {\n    error,\n    setError\n  } = useCityList(cities, allWeather, onSetAllWeather);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityList, \"yILzZCRIsW+HXUwNG6oQDrWcxik=\", false, function () {\n  return [useCityList];\n});\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx"],"names":["React","PropTypes","Grid","List","ListItem","Alert","useCityList","CityInfo","Weather","getCityCode","renderCityAndCountry","eventOnClickCity","cityAndCountry","weather","city","countryCode","country","temperature","state","CityList","cities","onClickCity","onSetAllWeather","allWeather","error","setError","map","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\n  const { city, countryCode, country } = cityAndCountry\n  // const { temperature, state } = weather\n\n  return (\n      <ListItem\n          button\n          key={getCityCode(city, countryCode)} \n          onClick={() => eventOnClickCity(city, countryCode)} >\n          <Grid container \n              justify=\"center\"\n              alignItems=\"center\"\n          >\n              <Grid item\n                  md={9}\n                  xs={12}>\n                  <CityInfo city={city} country={country} />\n              </Grid>\n              <Grid item\n                  md={3}\n                  xs={12}>\n                  <Weather \n                      temperature={weather && weather.temperature} \n                      state={weather && weather.state} /> \n              </Grid>\n          </Grid>\n      </ListItem>\n  )\n}\n\nconst CityList = ({ cities, onClickCity, onSetAllWeather, allWeather }) => {\n  const { error, setError } = useCityList(cities, allWeather, onSetAllWeather);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default CityList;\n"]},"metadata":{},"sourceType":"module"}