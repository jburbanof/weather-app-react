{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\n\nconst useCityList = cities => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        const response = await axios.get(url);\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n        setAllWeather(allWeather => ({ ...allWeather,\n          ...allWeatherAux\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {\n    allWeather,\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"Zjm/TNEo0nrMGezFCAF38/DHJk0=\");\n\nexport default useCityList;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityList.jsx"],"names":["useState","useEffect","axios","getAllWeather","getWeatherUrl","useCityList","cities","allWeather","setAllWeather","error","setError","setWeather","city","countryCode","url","response","get","allWeatherAux","request","forEach"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAEA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAC9C,YAAMC,GAAG,GAAGV,aAAa,CAACQ,IAAD,EAAOC,WAAP,CAAzB;;AAEA,UAAI;AACF,cAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAMG,aAAa,GAAGd,aAAa,CAACY,QAAD,EAAWH,IAAX,EAAiBC,WAAjB,CAAnC;AACAL,QAAAA,aAAa,CAAED,UAAD,KAAiB,EAAE,GAAGA,UAAL;AAAiB,aAAGU;AAApB,SAAjB,CAAD,CAAb;AACD,OAJD,CAIE,OAAOR,KAAP,EAAc;AACd,YAAIA,KAAK,CAACM,QAAV,EAAoB;AAClBL,UAAAA,QAAQ,CAAC,sBAAD,CAAR;AACD,SAFD,MAEO,IAAID,KAAK,CAACS,OAAV,EAAmB;AACxBR,UAAAA,QAAQ,CAAC,wBAAD,CAAR;AACD,SAFM,MAEA;AACLA,UAAAA,QAAQ,CAAC,mBAAD,CAAR;AACD;AACF;AACF,KAhBD;;AAiBAJ,IAAAA,MAAM,CAACa,OAAP,CAAe,CAAC;AAAEP,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AACxCF,MAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AACD,KAFD;AAGD,GArBQ,EAqBN,CAACP,MAAD,CArBM,CAAT;AAsBA,SAAO;AAAEC,IAAAA,UAAF;AAAcE,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAP;AACD,CA1BD;;GAAML,W;;AA4BN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\n\nconst useCityList = (cities) => {\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        const response = await axios.get(url);\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n        setAllWeather((allWeather) => ({ ...allWeather, ...allWeatherAux }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n    cities.forEach(({ city, countryCode }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return { allWeather, error, setError };\n};\n\nexport default useCityList;\n"]},"metadata":{},"sourceType":"module"}