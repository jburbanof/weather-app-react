{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityCountry, weather) => {\n  const {\n    city,\n    countryCode,\n    country\n  } = cityCountry;\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity,\n  onSetAllWeather,\n  allWeather\n}) => {\n  _s();\n\n  const {\n    error,\n    setError\n  } = useCityList(cities, allWeather, onSetAllWeather);\n  cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]));\n  const test = cities[0].city;\n  const test2 = cities[0].countryCode;\n  const test3 = getCityCode(test, test2);\n  console.log(test3);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityList, \"yILzZCRIsW+HXUwNG6oQDrWcxik=\", false, function () {\n  return [useCityList];\n});\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/CityList/CityList.jsx"],"names":["React","PropTypes","Grid","List","ListItem","Alert","useCityList","CityInfo","Weather","getCityCode","renderCityAndCountry","eventOnClickCity","cityCountry","weather","city","countryCode","country","temperature","state","CityList","cities","onClickCity","onSetAllWeather","allWeather","error","setError","map","cityAndCountry","test","test2","test3","console","log","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { getCityCode } from \"../../Utilities/utilities\";\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, countryCode, country } = cityCountry;\n  return (\n    <ListItem\n      button\n      key={getCityCode(city, countryCode)}\n      onClick={() => eventOnClickCity(city, countryCode)}\n    >\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <Grid item md={9} xs={12}>\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item md={3} xs={12}>\n          <Weather\n            temperature={weather && weather.temperature}\n            state={weather && weather.state}\n          />\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n};\n\nconst CityList = ({ cities, onClickCity, onSetAllWeather, allWeather }) => {\n  const { error, setError } = useCityList(cities, allWeather, onSetAllWeather);\n  cities.map((cityAndCountry) =>\n    renderCityAndCountry(onClickCity)(\n      cityAndCountry,\n      allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]\n    )\n  );\n  const test = cities[0].city;\n  const test2 = cities[0].countryCode;\n  const test3 = getCityCode(test, test2)\n  console.log(test3)\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default CityList;\n"]},"metadata":{},"sourceType":"module"}