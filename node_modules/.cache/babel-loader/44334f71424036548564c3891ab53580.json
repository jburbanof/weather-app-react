{"ast":null,"code":"var _jsxFileName = \"/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/ForecastChart/ForecastChart.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForecastChart = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    height: 250,\n    width: 700,\n    margin: {\n      top: 20,\n      bottom: 20,\n      left: 5,\n      right: 5\n    },\n    data: data,\n    children: [/*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"max\",\n      stroke: \"#ff0000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"min\",\n      stroke: \"#0000ff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ForecastChart;\nForecastChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    dayHour: PropTypes.string.isRequired,\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired\n  })).isRequired\n};\nForecastChart.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ForecastChart\",\n  \"props\": {\n    \"data\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"dayHour\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"min\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"max\": {\n              \"name\": \"number\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default ForecastChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastChart\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/Components/ForecastChart/ForecastChart.jsx\"] = {\n    name: \"ForecastChart\",\n    docgenInfo: ForecastChart.__docgenInfo,\n    path: \"src/Components/ForecastChart/ForecastChart.jsx\"\n  };\n}","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Components/ForecastChart/ForecastChart.jsx"],"names":["React","PropTypes","LineChart","Line","CartesianGrid","XAxis","YAxis","ForecastChart","data","top","bottom","left","right","propTypes","arrayOf","shape","dayHour","string","isRequired","min","number","max"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,EAAyCC,KAAzC,EAAgDC,KAAhD,QAA6D,UAA7D;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAClC,sBACE,QAAC,SAAD;AACE,IAAA,MAAM,EAAE,GADV;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,MAAM,EAAE,EAAnB;AAAuBC,MAAAA,IAAI,EAAE,CAA7B;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KAHV;AAIE,IAAA,IAAI,EAAEJ,IAJR;AAAA,4BAMI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,KAA9B;AAAoC,MAAA,MAAM,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,KAA9B;AAAoC,MAAA,MAAM,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAfD;;KAAMD,a;AAiBNA,aAAa,CAACM,SAAd,GAA0B;AACxBL,EAAAA,IAAI,EAAEP,SAAS,CAACa,OAAV,CACJb,SAAS,CAACc,KAAV,CAAgB;AACdC,IAAAA,OAAO,EAAEf,SAAS,CAACgB,MAAV,CAAiBC,UADZ;AAEdC,IAAAA,GAAG,EAAElB,SAAS,CAACmB,MAAV,CAAiBF,UAFR;AAGdG,IAAAA,GAAG,EAAEpB,SAAS,CAACmB,MAAV,CAAiBF;AAHR,GAAhB,CADI,EAMJA;AAPsB,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,eAAeX,aAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from \"recharts\";\n\nconst ForecastChart = ({ data }) => {\n  return (\n    <LineChart\n      height={250}\n      width={700}\n      margin={{ top: 20, bottom: 20, left: 5, right: 5 }}\n      data={data}\n    >\n        <XAxis></XAxis>\n        <YAxis></YAxis>\n      <CartesianGrid></CartesianGrid>\n      <Line type=\"monotone\" dataKey=\"max\" stroke=\"#ff0000\"></Line>\n      <Line type=\"monotone\" dataKey=\"min\" stroke=\"#0000ff\"></Line>\n    </LineChart>\n  );\n};\n\nForecastChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      dayHour: PropTypes.string.isRequired,\n      min: PropTypes.number.isRequired,\n      max: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ForecastChart;\n"]},"metadata":{},"sourceType":"module"}