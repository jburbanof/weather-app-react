{"ast":null,"code":"var convert,\n    keys = require('lodash.keys'),\n    each = require('lodash.foreach'),\n    measures = {\n  length: require('./definitions/length'),\n  area: require('./definitions/area'),\n  mass: require('./definitions/mass'),\n  volume: require('./definitions/volume'),\n  each: require('./definitions/each'),\n  temperature: require('./definitions/temperature'),\n  time: require('./definitions/time'),\n  digital: require('./definitions/digital'),\n  partsPer: require('./definitions/partsPer'),\n  speed: require('./definitions/speed'),\n  pace: require('./definitions/pace'),\n  pressure: require('./definitions/pressure'),\n  current: require('./definitions/current'),\n  voltage: require('./definitions/voltage'),\n  power: require('./definitions/power'),\n  reactivePower: require('./definitions/reactivePower'),\n  apparentPower: require('./definitions/apparentPower'),\n  energy: require('./definitions/energy'),\n  reactiveEnergy: require('./definitions/reactiveEnergy'),\n  volumeFlowRate: require('./definitions/volumeFlowRate'),\n  illuminance: require('./definitions/illuminance'),\n  frequency: require('./definitions/frequency'),\n  angle: require('./definitions/angle')\n},\n    Converter;\n\nConverter = function Converter(numerator, denominator) {\n  if (denominator) this.val = numerator / denominator;else this.val = numerator;\n};\n/**\n* Lets the converter know the source unit abbreviation\n*/\n\n\nConverter.prototype.from = function (from) {\n  if (this.destination) throw new Error('.from must be called before .to');\n  this.origin = this.getUnit(from);\n\n  if (!this.origin) {\n    this.throwUnsupportedUnitError(from);\n  }\n\n  return this;\n};\n/**\n* Converts the unit and returns the value\n*/\n\n\nConverter.prototype.to = function (to) {\n  if (!this.origin) throw new Error('.to must be called after .from');\n  this.destination = this.getUnit(to);\n  var result, transform;\n\n  if (!this.destination) {\n    this.throwUnsupportedUnitError(to);\n  } // Don't change the value if origin and destination are the same\n\n\n  if (this.origin.abbr === this.destination.abbr) {\n    return this.val;\n  } // You can't go from liquid to mass, for example\n\n\n  if (this.destination.measure != this.origin.measure) {\n    throw new Error('Cannot convert incompatible measures of ' + this.destination.measure + ' and ' + this.origin.measure);\n  }\n  /**\n  * Convert from the source value to its anchor inside the system\n  */\n\n\n  result = this.val * this.origin.unit.to_anchor;\n  /**\n  * For some changes it's a simple shift (C to K)\n  * So we'll add it when convering into the unit (later)\n  * and subtract it when converting from the unit\n  */\n\n  if (this.origin.unit.anchor_shift) {\n    result -= this.origin.unit.anchor_shift;\n  }\n  /**\n  * Convert from one system to another through the anchor ratio. Some conversions\n  * aren't ratio based or require more than a simple shift. We can provide a custom\n  * transform here to provide the direct result\n  */\n\n\n  if (this.origin.system != this.destination.system) {\n    transform = measures[this.origin.measure]._anchors[this.origin.system].transform;\n\n    if (typeof transform === 'function') {\n      result = transform(result);\n    } else {\n      result *= measures[this.origin.measure]._anchors[this.origin.system].ratio;\n    }\n  }\n  /**\n  * This shift has to be done after the system conversion business\n  */\n\n\n  if (this.destination.unit.anchor_shift) {\n    result += this.destination.unit.anchor_shift;\n  }\n  /**\n  * Convert to another unit inside the destination system\n  */\n\n\n  return result / this.destination.unit.to_anchor;\n};\n/**\n* Converts the unit to the best available unit.\n*/\n\n\nConverter.prototype.toBest = function (options) {\n  if (!this.origin) throw new Error('.toBest must be called after .from');\n  var options = Object.assign({\n    exclude: [],\n    cutOffNumber: 1\n  }, options);\n  var best;\n  /**\n    Looks through every possibility for the 'best' available unit.\n    i.e. Where the value has the fewest numbers before the decimal point,\n    but is still higher than 1.\n  */\n\n  each(this.possibilities(), function (possibility) {\n    var unit = this.describe(possibility);\n    var isIncluded = options.exclude.indexOf(possibility) === -1;\n\n    if (isIncluded && unit.system === this.origin.system) {\n      var result = this.to(possibility);\n\n      if (!best || result >= options.cutOffNumber && result < best.val) {\n        best = {\n          val: result,\n          unit: possibility,\n          singular: unit.singular,\n          plural: unit.plural\n        };\n      }\n    }\n  }.bind(this));\n  return best;\n};\n/**\n* Finds the unit\n*/\n\n\nConverter.prototype.getUnit = function (abbr) {\n  var found;\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false;\n      each(units, function (unit, testAbbr) {\n        if (testAbbr == abbr) {\n          found = {\n            abbr: abbr,\n            measure: measure,\n            system: system,\n            unit: unit\n          };\n          return false;\n        }\n      });\n      if (found) return false;\n    });\n    if (found) return false;\n  });\n  return found;\n};\n\nvar describe = function describe(resp) {\n  return {\n    abbr: resp.abbr,\n    measure: resp.measure,\n    system: resp.system,\n    singular: resp.unit.name.singular,\n    plural: resp.unit.name.plural\n  };\n};\n/**\n* An alias for getUnit\n*/\n\n\nConverter.prototype.describe = function (abbr) {\n  var resp = Converter.prototype.getUnit(abbr);\n  var desc = null;\n\n  try {\n    desc = describe(resp);\n  } catch (err) {\n    this.throwUnsupportedUnitError(abbr);\n  }\n\n  return desc;\n};\n/**\n* Detailed list of all supported units\n*/\n\n\nConverter.prototype.list = function (measure) {\n  var list = [];\n  each(measures, function (systems, testMeasure) {\n    if (measure && measure !== testMeasure) return;\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false;\n      each(units, function (unit, abbr) {\n        list = list.concat(describe({\n          abbr: abbr,\n          measure: testMeasure,\n          system: system,\n          unit: unit\n        }));\n      });\n    });\n  });\n  return list;\n};\n\nConverter.prototype.throwUnsupportedUnitError = function (what) {\n  var validUnits = [];\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false;\n      validUnits = validUnits.concat(keys(units));\n    });\n  });\n  throw new Error('Unsupported unit ' + what + ', use one of: ' + validUnits.join(', '));\n};\n/**\n* Returns the abbreviated measures that the value can be\n* converted to.\n*/\n\n\nConverter.prototype.possibilities = function (measure) {\n  var possibilities = [];\n\n  if (!this.origin && !measure) {\n    each(keys(measures), function (measure) {\n      each(measures[measure], function (units, system) {\n        if (system == '_anchors') return false;\n        possibilities = possibilities.concat(keys(units));\n      });\n    });\n  } else {\n    measure = measure || this.origin.measure;\n    each(measures[measure], function (units, system) {\n      if (system == '_anchors') return false;\n      possibilities = possibilities.concat(keys(units));\n    });\n  }\n\n  return possibilities;\n};\n/**\n* Returns the abbreviated measures that the value can be\n* converted to.\n*/\n\n\nConverter.prototype.measures = function () {\n  return keys(measures);\n};\n\nconvert = function convert(value) {\n  return new Converter(value);\n};\n\nmodule.exports = convert;","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/node_modules/convert-units/lib/index.js"],"names":["convert","keys","require","each","measures","length","area","mass","volume","temperature","time","digital","partsPer","speed","pace","pressure","current","voltage","power","reactivePower","apparentPower","energy","reactiveEnergy","volumeFlowRate","illuminance","frequency","angle","Converter","numerator","denominator","val","prototype","from","destination","Error","origin","getUnit","throwUnsupportedUnitError","to","result","transform","abbr","measure","unit","to_anchor","anchor_shift","system","_anchors","ratio","toBest","options","Object","assign","exclude","cutOffNumber","best","possibilities","possibility","describe","isIncluded","indexOf","singular","plural","bind","found","systems","units","testAbbr","resp","name","desc","err","list","testMeasure","concat","what","validUnits","join","value","module","exports"],"mappings":"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","sourcesContent":["var convert\n  , keys = require('lodash.keys')\n  , each = require('lodash.foreach')\n  , measures = {\n      length: require('./definitions/length')\n    , area: require('./definitions/area')\n    , mass: require('./definitions/mass')\n    , volume: require('./definitions/volume')\n    , each: require('./definitions/each')\n    , temperature: require('./definitions/temperature')\n    , time: require('./definitions/time')\n    , digital: require('./definitions/digital')\n    , partsPer: require('./definitions/partsPer')\n    , speed: require('./definitions/speed')\n    , pace: require('./definitions/pace')\n    , pressure: require('./definitions/pressure')\n    , current: require('./definitions/current')\n    , voltage: require('./definitions/voltage')\n    , power: require('./definitions/power')\n    , reactivePower: require('./definitions/reactivePower')\n    , apparentPower: require('./definitions/apparentPower')\n    , energy: require('./definitions/energy')\n    , reactiveEnergy: require('./definitions/reactiveEnergy')\n    , volumeFlowRate: require('./definitions/volumeFlowRate')\n    , illuminance: require('./definitions/illuminance')\n    , frequency: require('./definitions/frequency')\n    , angle : require('./definitions/angle')\n    }\n  , Converter;\n\nConverter = function (numerator, denominator) {\n  if(denominator)\n    this.val = numerator / denominator;\n  else\n    this.val = numerator;\n};\n\n/**\n* Lets the converter know the source unit abbreviation\n*/\nConverter.prototype.from = function (from) {\n  if(this.destination)\n    throw new Error('.from must be called before .to');\n\n  this.origin = this.getUnit(from);\n\n  if(!this.origin) {\n    this.throwUnsupportedUnitError(from);\n  }\n\n  return this;\n};\n\n/**\n* Converts the unit and returns the value\n*/\nConverter.prototype.to = function (to) {\n  if(!this.origin)\n    throw new Error('.to must be called after .from');\n\n  this.destination = this.getUnit(to);\n\n  var result\n    , transform;\n\n  if(!this.destination) {\n    this.throwUnsupportedUnitError(to);\n  }\n\n  // Don't change the value if origin and destination are the same\n  if (this.origin.abbr === this.destination.abbr) {\n    return this.val;\n  }\n\n  // You can't go from liquid to mass, for example\n  if(this.destination.measure != this.origin.measure) {\n    throw new Error('Cannot convert incompatible measures of '\n      + this.destination.measure + ' and ' + this.origin.measure);\n  }\n\n  /**\n  * Convert from the source value to its anchor inside the system\n  */\n  result = this.val * this.origin.unit.to_anchor;\n\n  /**\n  * For some changes it's a simple shift (C to K)\n  * So we'll add it when convering into the unit (later)\n  * and subtract it when converting from the unit\n  */\n  if (this.origin.unit.anchor_shift) {\n    result -= this.origin.unit.anchor_shift\n  }\n\n  /**\n  * Convert from one system to another through the anchor ratio. Some conversions\n  * aren't ratio based or require more than a simple shift. We can provide a custom\n  * transform here to provide the direct result\n  */\n  if(this.origin.system != this.destination.system) {\n    transform = measures[this.origin.measure]._anchors[this.origin.system].transform;\n    if (typeof transform === 'function') {\n      result = transform(result)\n    }\n    else {\n      result *= measures[this.origin.measure]._anchors[this.origin.system].ratio;\n    }\n  }\n\n  /**\n  * This shift has to be done after the system conversion business\n  */\n  if (this.destination.unit.anchor_shift) {\n    result += this.destination.unit.anchor_shift;\n  }\n\n  /**\n  * Convert to another unit inside the destination system\n  */\n  return result / this.destination.unit.to_anchor;\n};\n\n/**\n* Converts the unit to the best available unit.\n*/\nConverter.prototype.toBest = function(options) {\n  if(!this.origin)\n    throw new Error('.toBest must be called after .from');\n\n  var options = Object.assign({\n    exclude: [],\n    cutOffNumber: 1,\n  }, options)\n\n  var best;\n  /**\n    Looks through every possibility for the 'best' available unit.\n    i.e. Where the value has the fewest numbers before the decimal point,\n    but is still higher than 1.\n  */\n  each(this.possibilities(), function(possibility) {\n    var unit = this.describe(possibility);\n    var isIncluded = options.exclude.indexOf(possibility) === -1;\n\n    if (isIncluded && unit.system === this.origin.system) {\n      var result = this.to(possibility);\n      if (!best || (result >= options.cutOffNumber && result < best.val)) {\n        best = {\n          val: result,\n          unit: possibility,\n          singular: unit.singular,\n          plural: unit.plural\n        };\n      }\n    }\n  }.bind(this));\n\n  return best;\n}\n\n/**\n* Finds the unit\n*/\nConverter.prototype.getUnit = function (abbr) {\n  var found;\n\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if(system == '_anchors')\n        return false;\n\n      each(units, function (unit, testAbbr) {\n        if(testAbbr == abbr) {\n          found = {\n            abbr: abbr\n          , measure: measure\n          , system: system\n          , unit: unit\n          };\n          return false;\n        }\n      });\n\n      if(found)\n        return false;\n    });\n\n    if(found)\n      return false;\n  });\n\n  return found;\n};\n\nvar describe = function(resp) {\n  return {\n    abbr: resp.abbr\n  , measure: resp.measure\n  , system: resp.system\n  , singular: resp.unit.name.singular\n  , plural: resp.unit.name.plural\n  };\n}\n\n/**\n* An alias for getUnit\n*/\nConverter.prototype.describe = function (abbr) {\n  var resp = Converter.prototype.getUnit(abbr);\n  var desc = null;\n\n  try {\n    desc = describe(resp);\n  } catch(err) {\n    this.throwUnsupportedUnitError(abbr);\n  }\n\n  return desc;\n};\n\n/**\n* Detailed list of all supported units\n*/\nConverter.prototype.list = function (measure) {\n  var list = [];\n\n  each(measures, function (systems, testMeasure) {\n    if(measure && measure !== testMeasure)\n      return;\n\n    each(systems, function (units, system) {\n      if(system == '_anchors')\n        return false;\n\n      each(units, function (unit, abbr) {\n        list = list.concat(describe({\n          abbr: abbr,\n          measure: testMeasure\n        , system: system\n        , unit: unit\n        }));\n      });\n    });\n  });\n\n  return list;\n};\n\nConverter.prototype.throwUnsupportedUnitError = function (what) {\n  var validUnits = [];\n\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if(system == '_anchors')\n        return false;\n\n      validUnits = validUnits.concat(keys(units));\n    });\n  });\n\n  throw new Error('Unsupported unit ' + what + ', use one of: ' + validUnits.join(', '));\n}\n\n/**\n* Returns the abbreviated measures that the value can be\n* converted to.\n*/\nConverter.prototype.possibilities = function (measure) {\n  var possibilities = [];\n  if(!this.origin && !measure) {\n\t  each(keys(measures), function (measure){\n\t\t  each(measures[measure], function (units, system) {\n\t\t    if(system == '_anchors')\n\t\t      return false;\n\n\t\t    possibilities = possibilities.concat(keys(units));\n\t\t  });\n\t  });\n  } else {\n\t  measure = measure || this.origin.measure;\n\t  each(measures[measure], function (units, system) {\n\t    if(system == '_anchors')\n\t      return false;\n\n\t    possibilities = possibilities.concat(keys(units));\n\t  });\n  }\n\n  return possibilities;\n};\n\n/**\n* Returns the abbreviated measures that the value can be\n* converted to.\n*/\nConverter.prototype.measures = function () {\n  return keys(measures);\n};\n\nconvert = function (value) {\n  return new Converter(value);\n};\n\nmodule.exports = convert;\n"]},"metadata":{},"sourceType":"script"}