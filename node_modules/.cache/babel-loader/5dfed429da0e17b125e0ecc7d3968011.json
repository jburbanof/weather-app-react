{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport { validValues } from \"../Components/IconState\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityList = cities => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n\n      try {\n        const response = await axios.get(url);\n        const {\n          data\n        } = response;\n        const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0));\n        const state = data.weather[0].main.toLowerCase();\n        const propName = getCityCode(city, countryCode);\n        const propValue = {\n          temperature,\n          state\n        };\n        setAllWeather(allWeather => ({ ...allWeather,\n          [propName]: propValue\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Weather Server Error\");\n        } else if (error.request) {\n          setError(\"Verify Your Connection\");\n        } else {\n          setError(\"Un-expected Error\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {\n    allWeather,\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"Zjm/TNEo0nrMGezFCAF38/DHJk0=\");\n\nexport default useCityList;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityList.jsx"],"names":["React","useState","useEffect","axios","convertUnits","validValues","getCityCode","useCityList","cities","allWeather","setAllWeather","error","setError","setWeather","city","countryCode","apiKey","url","response","get","data","temperature","Number","main","temp","from","to","toFixed","state","weather","toLowerCase","propName","propValue","request","forEach"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAGA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAC9C,YAAMC,MAAM,GAAG,kCAAf;AACA,YAAMC,GAAG,GAAI,oDAAmDH,IAAK,IAAGC,WAAY,UAASC,MAAO,EAApG;;AAEA,UAAI;AACF,cAAME,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAM;AAAEG,UAAAA;AAAF,YAAWF,QAAjB;AACA,cAAMG,WAAW,GAAGC,MAAM,CACxBlB,YAAY,CAACgB,IAAI,CAACG,IAAL,CAAUC,IAAX,CAAZ,CAA6BC,IAA7B,CAAkC,GAAlC,EAAuCC,EAAvC,CAA0C,GAA1C,EAA+CC,OAA/C,CAAuD,CAAvD,CADwB,CAA1B;AAGA,cAAMC,KAAK,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBN,IAAhB,CAAqBO,WAArB,EAAd;AACA,cAAMC,QAAQ,GAAGzB,WAAW,CAACQ,IAAD,EAAOC,WAAP,CAA5B;AACA,cAAMiB,SAAS,GAAG;AAAEX,UAAAA,WAAF;AAAeO,UAAAA;AAAf,SAAlB;AACAlB,QAAAA,aAAa,CAAED,UAAD,KAAiB,EAC7B,GAAGA,UAD0B;AAE7B,WAACsB,QAAD,GAAYC;AAFiB,SAAjB,CAAD,CAAb;AAID,OAbD,CAaE,OAAOrB,KAAP,EAAc;AACd,YAAIA,KAAK,CAACO,QAAV,EAAoB;AAClBN,UAAAA,QAAQ,CAAC,sBAAD,CAAR;AACD,SAFD,MAEO,IAAID,KAAK,CAACsB,OAAV,EAAmB;AACxBrB,UAAAA,QAAQ,CAAC,wBAAD,CAAR;AACD,SAFM,MAEA;AACLA,UAAAA,QAAQ,CAAC,mBAAD,CAAR;AACD;AACF;AACF,KA1BD;;AA2BAJ,IAAAA,MAAM,CAAC0B,OAAP,CAAe,CAAC;AAAEpB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AACxCF,MAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AACD,KAFD;AAGD,GA/BQ,EA+BN,CAACP,MAAD,CA/BM,CAAT;AAgCA,SAAO;AAACC,IAAAA,UAAD;AAAaE,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,GAAP;AACD,CApCH;;GAAML,W;;AAsCJ,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport convertUnits from \"convert-units\";\nimport { validValues } from \"../Components/IconState\";\nimport { getCityCode } from \"../Utilities/utilities\"\n\n\nconst useCityList = (cities) => {\n    const [allWeather, setAllWeather] = useState({});\n    const [error, setError] = useState(null);\n    useEffect(() => {\n      const setWeather = async (city, countryCode) => {\n        const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n  \n        try {\n          const response = await axios.get(url);\n          const { data } = response;\n          const temperature = Number(\n            convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0)\n          );\n          const state = data.weather[0].main.toLowerCase();\n          const propName = getCityCode(city, countryCode );\n          const propValue = { temperature, state };\n          setAllWeather((allWeather) => ({\n            ...allWeather,\n            [propName]: propValue,\n          }));\n        } catch (error) {\n          if (error.response) {\n            setError(\"Weather Server Error\");\n          } else if (error.request) {\n            setError(\"Verify Your Connection\");\n          } else {\n            setError(\"Un-expected Error\");\n          }\n        }\n      };\n      cities.forEach(({ city, countryCode }) => {\n        setWeather(city, countryCode);\n      });\n    }, [cities]);\n    return {allWeather, error, setError}\n  }\n\n  export default useCityList\n  "]},"metadata":{},"sourceType":"module"}