{"ast":null,"code":"import _regeneratorRuntime from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _asyncToGenerator from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect}from\"react\";import{useParams}from\"react-router-dom\";import axios from\"axios\";import getChartData from\"../Utilities/transform/getChartData\";import{getForecastUrl}from\"../Utilities/urls\";import getForecastItemList from\"../Utilities/transform/getForecastItemList\";import{getCityCode}from\"../Utilities/utilities\";var useCityPage=function useCityPage(actions,allChartData,allForecastItemList){var _useParams=useParams(),city=_useParams.city,countryCode=_useParams.countryCode;useEffect(function(){var getForecast=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var url,cityCode,_yield$axios$get,data,dataAux,forecastItemListAux;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=getForecastUrl(city,countryCode);cityCode=getCityCode(city,countryCode);_context.prev=2;_context.next=5;return axios.get(url);case 5:_yield$axios$get=_context.sent;data=_yield$axios$get.data;dataAux=getChartData(data);//onSetChartData({ [cityCode]: dataAux });\nactions({type:'SET_CHART_DATA',payload:_defineProperty({},cityCode,dataAux)});forecastItemListAux=getForecastItemList(data);//onSetForecastItemList({ [cityCode]: forecastItemListAux });\nactions({type:'SET_FORECAST_ITEM_LIST',payload:_defineProperty({},cityCode,forecastItemListAux)});_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](2);console.log(\"Error\");case 16:case\"end\":return _context.stop();}}},_callee,null,[[2,13]]);}));return function getForecast(){return _ref.apply(this,arguments);};}();var cityCode=getCityCode(city,countryCode);if(allChartData&&allForecastItemList&&!allChartData[cityCode]&&!allForecastItemList[cityCode]){getForecast();}},[city,countryCode,actions,allChartData,allForecastItemList]);return{city:city,countryCode:countryCode};};export default useCityPage;","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/Hooks/useCityPage.jsx"],"names":["useEffect","useParams","axios","getChartData","getForecastUrl","getForecastItemList","getCityCode","useCityPage","actions","allChartData","allForecastItemList","city","countryCode","getForecast","url","cityCode","get","data","dataAux","type","payload","forecastItemListAux","console","log"],"mappings":"kYAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,qCAAzB,CACA,OAASC,cAAT,KAA+B,mBAA/B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,4CAAhC,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,OAAD,CAAUC,YAAV,CAAwBC,mBAAxB,CAAiD,CACnE,eAA8BT,SAAS,EAAvC,CAAQU,IAAR,YAAQA,IAAR,CAAcC,WAAd,YAAcA,WAAd,CACAZ,SAAS,CAAC,UAAM,CACd,GAAMa,CAAAA,WAAW,0FAAG,sMACZC,GADY,CACNV,cAAc,CAACO,IAAD,CAAOC,WAAP,CADR,CAEZG,QAFY,CAEDT,WAAW,CAACK,IAAD,CAAOC,WAAP,CAFV,uCAIOV,CAAAA,KAAK,CAACc,GAAN,CAAUF,GAAV,CAJP,uCAIRG,IAJQ,kBAIRA,IAJQ,CAKVC,OALU,CAKAf,YAAY,CAACc,IAAD,CALZ,CAOhB;AACAT,OAAO,CAAC,CAACW,IAAI,CAAE,gBAAP,CAAyBC,OAAO,oBAAIL,QAAJ,CAAeG,OAAf,CAAhC,CAAD,CAAP,CACMG,mBATU,CASYhB,mBAAmB,CAACY,IAAD,CAT/B,CAUhB;AACAT,OAAO,CAAC,CAACW,IAAI,CAAE,wBAAP,CAAiCC,OAAO,oBAAIL,QAAJ,CAAeM,mBAAf,CAAxC,CAAD,CAAP,CAXgB,iFAahBC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAbgB,qEAAH,kBAAXV,CAAAA,WAAW,0CAAjB,CAgBA,GAAME,CAAAA,QAAQ,CAAGT,WAAW,CAACK,IAAD,CAAOC,WAAP,CAA5B,CACA,GAAGH,YAAY,EAAIC,mBAAhB,EAAuC,CAACD,YAAY,CAACM,QAAD,CAApD,EAAkE,CAACL,mBAAmB,CAACK,QAAD,CAAzF,CAAoG,CAClGF,WAAW,GACZ,CAEF,CAtBQ,CAsBN,CAACF,IAAD,CAAOC,WAAP,CAAoBJ,OAApB,CAA6BC,YAA7B,CAA2CC,mBAA3C,CAtBM,CAAT,CAuBA,MAAO,CAAEC,IAAI,CAAJA,IAAF,CAAQC,WAAW,CAAXA,WAAR,CAAP,CACD,CA1BD,CA4BA,cAAeL,CAAAA,WAAf","sourcesContent":["import { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport getChartData from \"../Utilities/transform/getChartData\";\nimport { getForecastUrl } from \"../Utilities/urls\";\nimport getForecastItemList from \"../Utilities/transform/getForecastItemList\";\nimport { getCityCode } from \"../Utilities/utilities\";\n\nconst useCityPage = (actions, allChartData, allForecastItemList ) => {\n  const { city, countryCode } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const cityCode = getCityCode(city, countryCode);\n      try {\n        const { data } = await axios.get(url);\n        const dataAux = getChartData(data);\n\n        //onSetChartData({ [cityCode]: dataAux });\n        actions({type: 'SET_CHART_DATA', payload: {[cityCode]: dataAux}})\n        const forecastItemListAux = getForecastItemList(data);\n        //onSetForecastItemList({ [cityCode]: forecastItemListAux });\n        actions({type: 'SET_FORECAST_ITEM_LIST', payload: {[cityCode]: forecastItemListAux}})\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n    const cityCode = getCityCode(city, countryCode)\n    if(allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]){\n      getForecast();\n    }\n    \n  }, [city, countryCode, actions, allChartData, allForecastItemList]);\n  return { city, countryCode };\n};\n\nexport default useCityPage;\n"]},"metadata":{},"sourceType":"module"}