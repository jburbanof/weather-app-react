{"ast":null,"code":"import _toConsumableArray from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/julian/Desktop/gitReps/weather-app-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useHistory}from\"react-router-dom\";import Paper from\"@material-ui/core/Paper\";import CityList from\"../Components/CityList\";import AppFrame from\"../Components/AppFrame\";import Search from\"../Components/Search\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MainPage=function MainPage(_ref){var actions=_ref.actions,data=_ref.data;var history=useHistory();var onClickHandler=function onClickHandler(city,countryCode){history.push(\"/city/\".concat(countryCode,\"/\").concat(city));};var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cityCountry=_useState2[0],setCityCountry=_useState2[1];var createNewTask=function createNewTask(newCity,newCountryCode){setCityCountry([].concat(_toConsumableArray(cityCountry),[{city:newCity,countryCode:newCountryCode}]));};var eventOnClickDelete=function eventOnClickDelete(city){setCityCountry(_toConsumableArray(cityCountry).filter(function(i){return i.city!==city;}));};useEffect(function(){var data=JSON.parse(localStorage.getItem(\"cityCountry\"));if(data.length===0){setCityCountry([{city:\"Bogotá\",countryCode:\"CO\"}]);console.log(\"test\",cityCountry);}else{setCityCountry(data);}},[]);useEffect(function(){localStorage.setItem(\"cityCountry\",JSON.stringify(cityCountry));});return/*#__PURE__*/_jsxs(AppFrame,{children:[/*#__PURE__*/_jsx(Search,{callback:createNewTask}),cityCountry.length>0&&/*#__PURE__*/_jsx(Paper,{elevation:3,children:/*#__PURE__*/_jsx(CityList,{data:data,actions:actions,cities:cityCountry,onClickCity:onClickHandler,eventOnClickDelete:eventOnClickDelete})})]});};export default MainPage;","map":{"version":3,"sources":["/home/julian/Desktop/gitReps/weather-app-react/src/Pages/MainPage.jsx"],"names":["React","useState","useEffect","useHistory","Paper","CityList","AppFrame","Search","MainPage","actions","data","history","onClickHandler","city","countryCode","push","cityCountry","setCityCountry","createNewTask","newCity","newCountryCode","eventOnClickDelete","filter","i","JSON","parse","localStorage","getItem","length","console","log","setItem","stringify"],"mappings":"0QAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,yBAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAuB,IAApBC,CAAAA,OAAoB,MAApBA,OAAoB,CAAXC,IAAW,MAAXA,IAAW,CACtC,GAAMC,CAAAA,OAAO,CAAGR,UAAU,EAA1B,CAEA,GAAMS,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,CAAOC,WAAP,CAAuB,CAC5CH,OAAO,CAACI,IAAR,iBAAsBD,WAAtB,aAAqCD,IAArC,GACD,CAFD,CAIA,cAAsCZ,QAAQ,CAAC,EAAD,CAA9C,wCAAOe,WAAP,eAAoBC,cAApB,eAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAUC,cAAV,CAA6B,CACjDH,cAAc,8BACTD,WADS,GAEZ,CAAEH,IAAI,CAAEM,OAAR,CAAiBL,WAAW,CAAEM,cAA9B,CAFY,GAAd,CAID,CALD,CAMA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACR,IAAD,CAAU,CACnCI,cAAc,CACZ,mBAAID,WAAJ,EAAiBM,MAAjB,CAAwB,SAACC,CAAD,CAAO,CAC7B,MAAOA,CAAAA,CAAC,CAACV,IAAF,GAAWA,IAAlB,CACD,CAFD,CADY,CAAd,CAKD,CAND,CAOAX,SAAS,CAAC,UAAM,CACd,GAAIQ,CAAAA,IAAI,CAAGc,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAX,CAGA,GAAIjB,IAAI,CAACkB,MAAL,GAAgB,CAApB,CAAuB,CACrBX,cAAc,CAAC,CAAC,CAAEJ,IAAI,CAAE,QAAR,CAAkBC,WAAW,CAAE,IAA/B,CAAD,CAAD,CAAd,CACAe,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoBd,WAApB,EACD,CAHD,IAGO,CACLC,cAAc,CAACP,IAAD,CAAd,CACD,CACF,CAVQ,CAUP,EAVO,CAAT,CAWAR,SAAS,CAAC,UAAM,CACdwB,YAAY,CAACK,OAAb,CAAqB,aAArB,CAAoCP,IAAI,CAACQ,SAAL,CAAehB,WAAf,CAApC,EACD,CAFQ,CAAT,CAIA,mBACE,MAAC,QAAD,yBACE,KAAC,MAAD,EAAQ,QAAQ,CAAEE,aAAlB,EADF,CAGGF,WAAW,CAACY,MAAZ,CAAqB,CAArB,eACC,KAAC,KAAD,EAAO,SAAS,CAAE,CAAlB,uBACE,KAAC,QAAD,EACE,IAAI,CAAElB,IADR,CAEE,OAAO,CAAED,OAFX,CAGE,MAAM,CAAEO,WAHV,CAIE,WAAW,CAAEJ,cAJf,CAKE,kBAAkB,CAAES,kBALtB,EADF,EAJJ,GADF,CAiBD,CAtDD,CAwDA,cAAeb,CAAAA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CityList from \"../Components/CityList\";\nimport AppFrame from \"../Components/AppFrame\";\nimport Search from \"../Components/Search\";\n\nconst MainPage = ({ actions, data }) => {\n  const history = useHistory();\n\n  const onClickHandler = (city, countryCode) => {\n    history.push(`/city/${countryCode}/${city}`);\n  };\n\n  const [cityCountry, setCityCountry] = useState([]);\n\n  const createNewTask = (newCity, newCountryCode) => {\n    setCityCountry([\n      ...cityCountry,\n      { city: newCity, countryCode: newCountryCode },\n    ]);\n  };\n  const eventOnClickDelete = (city) => {\n    setCityCountry(\n      [...cityCountry].filter((i) => {\n        return i.city !== city;\n      })\n    );\n  };\n  useEffect(() => {\n    let data = JSON.parse(localStorage.getItem(\"cityCountry\"));\n    \n\n    if (data.length === 0) {\n      setCityCountry([{ city: \"Bogotá\", countryCode: \"CO\" }]);\n      console.log(\"test\", cityCountry);\n    } else {\n      setCityCountry(data);\n    }\n  },[]);\n  useEffect(() => {\n    localStorage.setItem(\"cityCountry\", JSON.stringify(cityCountry));\n  });\n\n  return (\n    <AppFrame>\n      <Search callback={createNewTask} />\n\n      {cityCountry.length > 0 && (\n        <Paper elevation={3}>\n          <CityList\n            data={data}\n            actions={actions}\n            cities={cityCountry}\n            onClickCity={onClickHandler}\n            eventOnClickDelete={eventOnClickDelete}\n          />\n        </Paper>\n      )}\n    </AppFrame>\n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}