{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moment from \"moment\";\nimport convertUnits from \"convert-units\";\nimport axios from \"axios\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\n\nconst useCityPage = () => {\n  _s();\n\n  const [chartData, setChartData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n      console.log(url);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        console.log(\"data\", data);\n\n        const toCelsius = temp => convertUnits(temp).from(\"K\").to(\"C\");\n\n        const daysAhead = [0, 1, 2, 3, 4, 5];\n        const days = daysAhead.map(d => moment().add(d, \"d\"));\n        const dataAux = days.map(day => {\n          const tempObjArray = data.list.filter(item => {\n            const dayOfYear = moment.unix(item.dt).dayOfYear();\n            return dayOfYear === day.dayOfYear();\n          });\n          console.log(\"dia\", day.dayOfYear());\n          console.log(tempObjArray);\n          const temps = tempObjArray.map(item => item.main.temp);\n          return {\n            dayHour: day.format(\"dddd\"),\n            min: Number(toCelsius(Math.min(...temps)).toFixed(0)),\n            max: Number(toCelsius(Math.max(...temps)).toFixed(0)),\n            hasTemps: temps.length > 0 ? true : false\n          };\n        }).filter(item => item.hastTemps = true);\n        setChartData(dataAux);\n        const interval = [3, 6, 9, 12, 15, 18];\n        const forecastItemListAux = data.list.filter((item, index) => interval.includes(index)).map(item => {\n          return {\n            hour: moment.unix(item.dt).hour(),\n            weekDay: moment.unix(item.dt).format(\"dddd\"),\n            state: item.weather[0].main.toLowerCase(),\n            temperature: Number(toCelsius(item.main.temp).toFixed(0))\n          };\n        });\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"Error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode]);\n  return {\n    city,\n    chartData,\n    forecastItemList\n  };\n};\n\n_s(useCityPage, \"Oq0LXJ0yq1/kUXy6RQ4H5Y/HF+A=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityPage.jsx"],"names":["useState","useEffect","useParams","moment","convertUnits","axios","getWeatherUrl","useCityPage","chartData","setChartData","forecastItemList","setForecastItemList","city","countryCode","getForecast","url","console","log","data","get","toCelsius","temp","from","to","daysAhead","days","map","d","add","dataAux","day","tempObjArray","list","filter","item","dayOfYear","unix","dt","temps","main","dayHour","format","min","Number","Math","toFixed","max","hasTemps","length","hastTemps","interval","forecastItemListAux","index","includes","hour","weekDay","state","weather","toLowerCase","temperature","error"],"mappings":";;AAAA,SAAUA,QAAV,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBX,SAAS,EAAvC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,WAAW,GAAG,OAAOF,IAAP,EAAaC,WAAb,KAA6B;AAC/C,YAAME,GAAG,GAAGT,aAAa,CAACM,IAAD,EAAOC,WAAP,CAAzB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAEA,UAAI;AACF,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMb,KAAK,CAACc,GAAN,CAAUJ,GAAV,CAAvB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,IAApB;;AACA,cAAME,SAAS,GAAIC,IAAD,IAAUjB,YAAY,CAACiB,IAAD,CAAZ,CAAmBC,IAAnB,CAAwB,GAAxB,EAA6BC,EAA7B,CAAgC,GAAhC,CAA5B;;AACA,cAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAlB;AACA,cAAMC,IAAI,GAAGD,SAAS,CAACE,GAAV,CAAeC,CAAD,IAAOxB,MAAM,GAAGyB,GAAT,CAAaD,CAAb,EAAgB,GAAhB,CAArB,CAAb;AACA,cAAME,OAAO,GAAGJ,IAAI,CAACC,GAAL,CAAUI,GAAD,IAAS;AAChC,gBAAMC,YAAY,GAAGb,IAAI,CAACc,IAAL,CAAUC,MAAV,CAAkBC,IAAD,IAAU;AAC9C,kBAAMC,SAAS,GAAGhC,MAAM,CAACiC,IAAP,CAAYF,IAAI,CAACG,EAAjB,EAAqBF,SAArB,EAAlB;AACA,mBAAOA,SAAS,KAAKL,GAAG,CAACK,SAAJ,EAArB;AACD,WAHoB,CAArB;AAIAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBa,GAAG,CAACK,SAAJ,EAAnB;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAYc,YAAZ;AACA,gBAAMO,KAAK,GAAGP,YAAY,CAACL,GAAb,CAAkBQ,IAAD,IAAUA,IAAI,CAACK,IAAL,CAAUlB,IAArC,CAAd;AAEA,iBAAO;AACLmB,YAAAA,OAAO,EAAEV,GAAG,CAACW,MAAJ,CAAW,MAAX,CADJ;AAELC,YAAAA,GAAG,EAAEC,MAAM,CAACvB,SAAS,CAACwB,IAAI,CAACF,GAAL,CAAS,GAAGJ,KAAZ,CAAD,CAAT,CAA8BO,OAA9B,CAAsC,CAAtC,CAAD,CAFN;AAGLC,YAAAA,GAAG,EAAEH,MAAM,CAACvB,SAAS,CAACwB,IAAI,CAACE,GAAL,CAAS,GAAGR,KAAZ,CAAD,CAAT,CAA8BO,OAA9B,CAAsC,CAAtC,CAAD,CAHN;AAILE,YAAAA,QAAQ,EAAGT,KAAK,CAACU,MAAN,GAAe,CAAf,GAAoB,IAApB,GAAyB;AAJ/B,WAAP;AAMD,SAfe,EAebf,MAfa,CAeNC,IAAI,IAAIA,IAAI,CAACe,SAAL,GAAiB,IAfnB,CAAhB;AAiBAxC,QAAAA,YAAY,CAACoB,OAAD,CAAZ;AAEA,cAAMqB,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,CAAjB;AAEA,cAAMC,mBAAmB,GAAGjC,IAAI,CAACc,IAAL,CACzBC,MADyB,CAClB,CAACC,IAAD,EAAOkB,KAAP,KAAiBF,QAAQ,CAACG,QAAT,CAAkBD,KAAlB,CADC,EAEzB1B,GAFyB,CAEpBQ,IAAD,IAAU;AACb,iBAAO;AACLoB,YAAAA,IAAI,EAAEnD,MAAM,CAACiC,IAAP,CAAYF,IAAI,CAACG,EAAjB,EAAqBiB,IAArB,EADD;AAELC,YAAAA,OAAO,EAAEpD,MAAM,CAACiC,IAAP,CAAYF,IAAI,CAACG,EAAjB,EAAqBI,MAArB,CAA4B,MAA5B,CAFJ;AAGLe,YAAAA,KAAK,EAAEtB,IAAI,CAACuB,OAAL,CAAa,CAAb,EAAgBlB,IAAhB,CAAqBmB,WAArB,EAHF;AAILC,YAAAA,WAAW,EAAEhB,MAAM,CAACvB,SAAS,CAACc,IAAI,CAACK,IAAL,CAAUlB,IAAX,CAAT,CAA0BwB,OAA1B,CAAkC,CAAlC,CAAD;AAJd,WAAP;AAMD,SATyB,CAA5B;AAUAlC,QAAAA,mBAAmB,CAACwC,mBAAD,CAAnB;AACD,OAtCD,CAsCE,OAAOS,KAAP,EAAc;AACd5C,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KA7CD;;AA+CAH,IAAAA,WAAW;AACZ,GAjDQ,EAiDN,CAACF,IAAD,EAAOC,WAAP,CAjDM,CAAT;AAkDA,SAAO;AAACD,IAAAA,IAAD;AAAOJ,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CAvDD;;GAAMH,W;UAG4BL,S;;;AAsDlC,eAAeK,WAAf","sourcesContent":["import  { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moment from \"moment\";\nimport convertUnits from \"convert-units\";\nimport axios from \"axios\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\n\n\nconst useCityPage = () => {\n    const [chartData, setChartData] = useState(null);\n    const [forecastItemList, setForecastItemList] = useState(null);\n    const { city, countryCode } = useParams();\n    useEffect(() => {\n      const getForecast = async (city, countryCode) => {\n        const url = getWeatherUrl(city, countryCode)\n        console.log(url)\n  \n        try {\n          const { data } = await axios.get(url);\n          console.log(\"data\", data);\n          const toCelsius = (temp) => convertUnits(temp).from(\"K\").to(\"C\");\n          const daysAhead = [0, 1, 2, 3, 4, 5];\n          const days = daysAhead.map((d) => moment().add(d, \"d\"));\n          const dataAux = days.map((day) => {\n            const tempObjArray = data.list.filter((item) => {\n              const dayOfYear = moment.unix(item.dt).dayOfYear();\n              return dayOfYear === day.dayOfYear();\n            });\n            console.log(\"dia\", day.dayOfYear());\n            console.log(tempObjArray);\n            const temps = tempObjArray.map((item) => item.main.temp);\n  \n            return {\n              dayHour: day.format(\"dddd\"),\n              min: Number(toCelsius(Math.min(...temps)).toFixed(0)),\n              max: Number(toCelsius(Math.max(...temps)).toFixed(0)),\n              hasTemps: (temps.length > 0 ?  true:false  )\n            };\n          }).filter(item => item.hastTemps = true);\n  \n          setChartData(dataAux);\n  \n          const interval = [3, 6, 9, 12, 15, 18];\n  \n          const forecastItemListAux = data.list\n            .filter((item, index) => interval.includes(index))\n            .map((item) => {\n              return {\n                hour: moment.unix(item.dt).hour(),\n                weekDay: moment.unix(item.dt).format(\"dddd\"),\n                state: item.weather[0].main.toLowerCase(),\n                temperature: Number(toCelsius(item.main.temp).toFixed(0)),\n              };\n            });\n          setForecastItemList(forecastItemListAux);\n        } catch (error) {\n          console.log(\"Error\");\n        }\n      };\n  \n      getForecast();\n    }, [city, countryCode]);\n    return {city, chartData, forecastItemList}\n}\n\nexport default useCityPage"]},"metadata":{},"sourceType":"module"}