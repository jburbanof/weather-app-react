{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getCityCode } from \"../Utilities/utilities\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\n\nconst useCityList = (cities, allWeather, onSetAllWeather) => {\n  _s();\n\n  // const [allWeather, setAllWeather] = useState({})\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    debugger;\n\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl({\n        city,\n        countryCode\n      });\n\n      try {\n        const response = await axios.get(url);\n        const allWeatherAux = getAllWeather(response, city, countryCode); // setAllWeather(allWeather => ({ ...allWeather, ...allWeatherAux })\n\n        onSetAllWeather(allWeatherAux);\n      } catch (error) {\n        if (error.response) {\n          // Errores que nos responde el server\n          setError(\"Ha ocurrido un error en el servidor del clima\");\n        } else if (error.request) {\n          // Errores que suceden por no llegar al server\n          setError(\"Verifique la conexión a internet\");\n        } else {\n          // Errores imprevistos\n          setError(\"Error al cargar los datos\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      if (!allWeather[getCityCode(city, countryCode)]) {\n        setWeather(city, countryCode);\n      }\n    });\n  }, [cities, onSetAllWeather, allWeather]);\n  return {\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"JfhGochNIqPkY17zyDsXnSE7zLQ=\");\n\nexport default useCityList;","map":{"version":3,"sources":["/home/julian/Desktop/ReactCourse/react-weather-app/src/Hooks/useCityList.jsx"],"names":["useState","useEffect","axios","getCityCode","getAllWeather","getWeatherUrl","useCityList","cities","allWeather","onSetAllWeather","error","setError","setWeather","city","countryCode","url","response","get","allWeatherAux","request","forEach"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBC,eAArB,KAAyC;AAAA;;AACzD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;;AACA,UAAMW,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAE5C,YAAMC,GAAG,GAAGV,aAAa,CAAC;AAACQ,QAAAA,IAAD;AAAOC,QAAAA;AAAP,OAAD,CAAzB;;AAEA,UAAI;AACA,cAAME,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUF,GAAV,CAAvB;AAEA,cAAMG,aAAa,GAAGd,aAAa,CAACY,QAAD,EAAWH,IAAX,EAAiBC,WAAjB,CAAnC,CAHA,CAKA;;AACAL,QAAAA,eAAe,CAACS,aAAD,CAAf;AACH,OAPD,CAOE,OAAOR,KAAP,EAAc;AACZ,YAAIA,KAAK,CAACM,QAAV,EAAoB;AAAE;AAClBL,UAAAA,QAAQ,CAAC,+CAAD,CAAR;AACH,SAFD,MAEO,IAAID,KAAK,CAACS,OAAV,EAAmB;AAAE;AACxBR,UAAAA,QAAQ,CAAC,kCAAD,CAAR;AACH,SAFM,MAEA;AAAE;AACLA,UAAAA,QAAQ,CAAC,2BAAD,CAAR;AACH;AACJ;AAEJ,KArBD;;AAuBAJ,IAAAA,MAAM,CAACa,OAAP,CAAe,CAAC;AAAEP,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AACtC,UAAI,CAACN,UAAU,CAACL,WAAW,CAACU,IAAD,EAAOC,WAAP,CAAZ,CAAf,EAAiD;AAC7CF,QAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AACH;AACJ,KAJD;AAMH,GA/BQ,EA+BN,CAACP,MAAD,EAASE,eAAT,EAA0BD,UAA1B,CA/BM,CAAT;AAiCA,SAAO;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACH,CAtCD;;GAAML,W;;AAwCN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getCityCode } from \"../Utilities/utilities\";\nimport getAllWeather from \"../Utilities/transform/getAllWeather\";\nimport { getWeatherUrl } from \"../Utilities/urls\";\n\nconst useCityList = (cities, allWeather, onSetAllWeather) => {\n    // const [allWeather, setAllWeather] = useState({})\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        debugger\n        const setWeather = async (city, countryCode) => {\n\n            const url = getWeatherUrl({city, countryCode})\n\n            try {\n                const response = await axios.get(url)\n\n                const allWeatherAux = getAllWeather(response, city, countryCode)\n\n                // setAllWeather(allWeather => ({ ...allWeather, ...allWeatherAux })\n                onSetAllWeather(allWeatherAux)               \n            } catch (error) {\n                if (error.response) { // Errores que nos responde el server\n                    setError(\"Ha ocurrido un error en el servidor del clima\")\n                } else if (error.request) { // Errores que suceden por no llegar al server\n                    setError(\"Verifique la conexión a internet\")\n                } else { // Errores imprevistos\n                    setError(\"Error al cargar los datos\")\n                }                \n            }\n\n        }\n\n        cities.forEach(({ city, countryCode }) => {\n            if (!allWeather[getCityCode(city, countryCode)]) {\n                setWeather(city, countryCode)\n            }\n        });\n\n    }, [cities, onSetAllWeather, allWeather])\n\n    return { error, setError }\n}\n\nexport default useCityList"]},"metadata":{},"sourceType":"module"}