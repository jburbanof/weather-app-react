{"version":3,"file":"main.97d83222e805f235908f.hot-update.js","sources":["webpack:///./src/Components/AppFrame/AppFrame.jsx","webpack:///./src/Components/CityList/CityList.jsx","webpack:///./src/Components/ForecastItem/ForecastItem.jsx","webpack:///./src/Components/Weather/Weather.jsx"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport { IconContext } from \"react-icons\";\nimport { WiDaySunny } from \"react-icons/wi\";\nimport { Link as LinkRouter } from \"react-router-dom\";\n\nconst AppFrame = ({ children }) => {\n  const iconContextSize = useMemo(() => ({ size: \"2em\" }), []);\n  return (\n    <Grid container justifyContent=\"center\">\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton color=\"inherit\" aria-label=\"manu\">\n            <Link component={LinkRouter} to=\"/main\" color=\"inherit\">\n              <IconContext.Provider value={iconContextSize}>\n                <WiDaySunny />\n              </IconContext.Provider>\n            </Link>\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Weather App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid item xs={12} sm={11} md={10} lg={8}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n};\n\nAppFrame.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default AppFrame;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport  {AiFillDelete, IconContext} from \"react-icons\"\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport { useWeatherStateContext, useWeatherDispatchContext } from \"../../WeatherContext\";\n\nconst CityListItem = React.memo(\n  ({ city, countryCode, weather, eventOnClickCity}) => {\n    \n    return (\n      <ListItem button onClick={() => eventOnClickCity(city, countryCode)}>\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\n          <Grid item md={9} xs={12}>\n            <CityInfo city={city} countryCode={countryCode} />\n          </Grid>\n          <Grid item md={3} xs={12}>\n            <Weather\n              temperature={weather && weather.temperature}\n              state={weather && weather.state}\n            />\n          </Grid>\n          <Grid>\n              <IconContext.Provider value='size: \"6em\"'>\n                  <AiFillDelete/>\n              </IconContext.Provider>\n          </Grid>\n        </Grid>\n      </ListItem>\n    );\n  }\n);\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, countryCode } = cityCountry;\n  return (\n    <CityListItem\n      key={getCityCode(city, countryCode)}\n      eventOnClickCity={eventOnClickCity}\n      weather={weather}\n      {...cityCountry}\n    />\n  );\n};\n\nconst CityList = ({ cities, onClickCity }) => {\n  const actions = useWeatherDispatchContext();\n  const data = useWeatherStateContext();\n  const { allWeather } = data;\n  const { error, setError } = useCityList(cities, allWeather, actions);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CityList);\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconContext } from \"react-icons\";\nimport IconState, { validValues } from \"../IconState\";\n\nconst ForecastItem = ({ weekDay, hour, state, temperature }) => {\n  const iconContextSize = useMemo(() => ({ size: \"5em\" }),[])\n  return (\n    <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n      <Grid item>\n        <Typography>{weekDay}</Typography>\n      </Grid>\n      <Grid item>\n        <Typography>{hour}:00h</Typography>\n      </Grid>\n      <Grid item>\n        <IconContext.Provider value={iconContextSize}>\n          <IconState state={state} />\n        </IconContext.Provider>\n      </Grid>\n      <Grid item>\n        <Typography>{temperature}°C</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nForecastItem.propTypes = {\n  weekDay: PropTypes.string.isRequired,\n  hour: PropTypes.number.isRequired,\n  state: PropTypes.oneOf(validValues).isRequired,\n  temperature: PropTypes.number.isRequired,\n};\n\nexport default ForecastItem;\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { IconContext } from \"react-icons\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconState, { validValues } from \"./../IconState\";\n\nconst Weather = ({ temperature, state }) => {\n  const iconContextSize = useMemo(() => ({ size: \"6em\" }), []);\n  return (\n    <Grid\n      container\n      item\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      spacing={2}\n    >\n      <IconContext.Provider value={iconContextSize}>\n        {state ? (\n          <IconState state={state} />\n        ) : (\n          <Skeleton variant=\"circle\" height={80} width={80}></Skeleton>\n        )}\n      </IconContext.Provider>\n\n      {temperature ? (\n        <Typography display=\"inline\" variant=\"h3\">\n          {temperature}°C\n        </Typography>\n      ) : (\n        <Skeleton variant=\"circle\" height={80} width={80}></Skeleton>\n      )}\n    </Grid>\n  );\n};\n\nWeather.propTypes = {\n  temperature: PropTypes.number,\n  state: PropTypes.oneOf(validValues),\n};\n\nexport default Weather;\n"],"mappings":"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","sourceRoot":""}