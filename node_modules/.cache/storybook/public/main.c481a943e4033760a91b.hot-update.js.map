{"version":3,"file":"main.c481a943e4033760a91b.hot-update.js","sources":["webpack:///./src/Components/CityList/CityList.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport useCityList from \"../../Hooks/useCityList\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons\";\nimport { getCityCode } from \"../../Utilities/utilities\";\nimport {\n  useWeatherStateContext,\n  useWeatherDispatchContext,\n} from \"../../WeatherContext\";\n\nconst CityListItem = React.memo(\n  ({ city, countryCode, weather, eventOnClickCity }) => {\n    return (\n      <ListItem button onClick={() => eventOnClickCity(city, countryCode)}>\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\n          <Grid item md={6} xs={12}>\n            <CityInfo city={city} countryCode={countryCode} />\n          </Grid>\n          <Grid item md={3} xs={12}>\n            <Weather\n              temperature={weather && weather.temperature}\n              state={weather && weather.state}\n            />\n          </Grid>\n          <Grid item md={2} justifyContent=\"center\" alignItems=\"center\">\n            <IconContext.Provider value={{ size: \"3em\" }}>\n              <AiFillDelete />\n            </IconContext.Provider>\n          </Grid>\n        </Grid>\n      </ListItem>\n    );\n  }\n);\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, countryCode } = cityCountry;\n  return (\n    <CityListItem\n      key={getCityCode(city, countryCode)}\n      eventOnClickCity={eventOnClickCity}\n      weather={weather}\n      {...cityCountry}\n    />\n  );\n};\n\nconst CityList = ({ cities, onClickCity }) => {\n  const actions = useWeatherDispatchContext();\n  const data = useWeatherStateContext();\n  const { allWeather } = data;\n  const { error, setError } = useCityList(cities, allWeather, actions);\n\n  return (\n    <div>\n      {error && (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          {error}\n        </Alert>\n      )}\n      <List>\n        {cities.map((cityAndCountry) =>\n          renderCityAndCountry(onClickCity)(\n            cityAndCountry,\n            allWeather[\n              getCityCode(cityAndCountry.city, cityAndCountry.countryCode)\n            ]\n          )\n        )}\n      </List>\n    </div>\n  );\n};\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CityList);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAtBA;AACA;AAwBA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AA1BA;AACA;;;AADA;AA0BA;AACA;AAEA;AACA;AAFA;AAKA;AAPA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}