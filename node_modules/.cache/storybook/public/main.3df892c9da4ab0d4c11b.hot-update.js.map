{"version":3,"file":"main.3df892c9da4ab0d4c11b.hot-update.js","sources":["webpack:///./src/Components/CityList/CityList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport CityInfo from \"../CityInfo\";\nimport Weather from \"../Weather\";\n\nconst renderCityAndCountry = (eventOnClickCity) => (cityCountry, weather) => {\n  const { city, country } = cityCountry;\n  return (\n    <ListItem button key={city} onClick={eventOnClickCity}>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid item md={9} xs={12}>\n          <CityInfo city={city} country={country} />\n        </Grid>\n        <Grid item md={3} xs={12}>\n          {weather ? (\n            <Weather temperature={weather.temperature} state={weather.state} />\n          ) : (\n            \"No Data\"\n          )}\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n};\n\nconst CityList = ({ cities, onClickCity }) => {\n  const [allWeather, setAllWeather] = useState({});\n  useEffect(() => {\n    const setWeather = (city, country, countryCode) => {\n      const apiKey = \"6eed5ecf1b61d636500feff49314d96a\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${apiKey}`;\n      axios.get(url).then((response) => {\n        const { data } = response;\n        const temperature = data.main.temp;\n        const state = \"sunny\";\n        const propName = `${city}-${country}`;\n        const propValue = { temperature, state };\n        setAllWeather((allWeather) => ({\n          ...allWeather,\n          [propName]: propValue,\n        }));\n      });\n    };\n    cities.forEach(({ city, country, countryCode }) => {\n      setWeather(city, country, countryCode);\n    });\n  }, [cities]);\n\n  return (\n    <List>\n      {cities.map((cityAndCountry) =>\n        renderCityAndCountry(onClickCity)(\n          cityAndCountry,\n          allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]\n        )\n      )}\n    </List>\n  );\n};\n\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n      countryCode: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onClickCity: PropTypes.func.isRequired,\n};\n\nexport default CityList;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAlCA;AACA;AADA;AAmCA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}